diff --git a/Cache/_internal/CacheInternal.d.ts b/Cache/_internal/CacheInternal.d.ts
index 9dba4bf..140d4c2 100644
--- a/Cache/_internal/CacheInternal.d.ts
+++ b/Cache/_internal/CacheInternal.d.ts
@@ -7,7 +7,6 @@ import { Service } from "@tsplus/stdlib/service/Service";
 import { FiberId } from "@effect/core/io/FiberId/definition";
 import { Effect } from "@effect/core/io/Effect/definition";
 import { Chunk } from "@tsplus/stdlib/collections/Chunk/definition";
-import { Tuple } from "@tsplus/stdlib/data/Tuple/definition";
 import { CacheStats } from "@effect/cache/CacheStats/definition";
 import { Maybe } from "@tsplus/stdlib/data/Maybe/definition";
 import { EntryStats } from "@effect/cache/EntryStats/definition";
@@ -30,7 +29,7 @@ export declare class CacheInternal<Key, Environment, Error, Value> implements Ca
     private cacheState;
     constructor(capacity: number, lookup: Lookup<Key, Environment, Error, Value>, timeToLive: (exit: Exit<Error, Value>) => Duration, clock: Clock, environment: Service.Env<Environment>, fiberId: FiberId);
     get size(): Effect<never, never, number>;
-    get entries(): Effect<never, never, Chunk<Tuple<[Key, Value]>>>;
+    get entries(): Effect<never, never, Chunk<readonly [Key, Value]>>;
     get values(): Effect<never, never, Chunk<Value>>;
     get cacheStats(): Effect<never, never, CacheStats>;
     entryStats(k: Key): Effect<never, never, Maybe<EntryStats>>;
diff --git a/Cache/_internal/CacheInternal.js b/Cache/_internal/CacheInternal.js
index d9a378d..3fc71fb 100644
--- a/Cache/_internal/CacheInternal.js
+++ b/Cache/_internal/CacheInternal.js
@@ -10,8 +10,6 @@ var tsplus_module_1 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require
 
 var tsplus_module_2 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/core/io/Effect/operations/sync"));
 
-var tsplus_module_3 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@tsplus/stdlib/data/Tuple/make"));
-
 var tsplus_module_4 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@tsplus/stdlib/collections/Chunk/definition"));
 
 var tsplus_module_5 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/cache/CacheStats/definition"));
@@ -89,11 +87,9 @@ class CacheInternal {
     return tsplus_module_2.sync(() => {
       const entries = [];
 
-      for (const {
-        tuple: [key, value]
-      } of this.cacheState.map) {
+      for (const [key, value] of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
-          entries.push(tsplus_module_3.make(key, value.exit.value));
+          entries.push([key, value.exit.value]);
         }
       }
 
@@ -105,9 +101,7 @@ class CacheInternal {
     return tsplus_module_2.sync(() => {
       const values = [];
 
-      for (const {
-        tuple: [_, value]
-      } of this.cacheState.map) {
+      for (const [_, value] of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
           values.push(value.exit.value);
         }
diff --git a/_mjs/Cache/_internal/CacheInternal.mjs b/_mjs/Cache/_internal/CacheInternal.mjs
index a68b98c..549ffed 100644
--- a/_mjs/Cache/_internal/CacheInternal.mjs
+++ b/_mjs/Cache/_internal/CacheInternal.mjs
@@ -2,7 +2,6 @@ var _a;
 
 import * as tsplus_module_1 from "@effect/cache/Cache/_internal/CacheState";
 import * as tsplus_module_2 from "@effect/core/io/Effect/operations/sync";
-import * as tsplus_module_3 from "@tsplus/stdlib/data/Tuple/make";
 import * as tsplus_module_4 from "@tsplus/stdlib/collections/Chunk/definition";
 import * as tsplus_module_5 from "@effect/cache/CacheStats/definition";
 import * as tsplus_module_6 from "@effect/core/io/Effect/operations/succeed";
@@ -52,11 +51,11 @@ export class CacheInternal {
     return tsplus_module_2.sync(() => {
       const entries = [];
 
-      for (const {
-        tuple: [key, value]
-      } of this.cacheState.map) {
+      for (const 
+        [key, value]
+       of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
-          entries.push(tsplus_module_3.make(key, value.exit.value));
+          entries.push([key, value.exit.value]);
         }
       }
 
@@ -68,9 +67,9 @@ export class CacheInternal {
     return tsplus_module_2.sync(() => {
       const values = [];
 
-      for (const {
-        tuple: [_, value]
-      } of this.cacheState.map) {
+      for (const 
+        [_, value]
+       of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
           values.push(value.exit.value);
         }
diff --git a/tsconfig.base.json b/tsconfig.base.json
new file mode 100644
index 0000000..cc7c28d
--- /dev/null
+++ b/tsconfig.base.json
@@ -0,0 +1,62 @@
+{
+    "compilerOptions": {
+        "moduleDetection": "force",
+        "composite": true,
+        "downlevelIteration": true,
+        "resolveJsonModule": true,
+        "esModuleInterop": true,
+        "declaration": true,
+        "skipLibCheck": true,
+        "emitDecoratorMetadata": true,
+        "experimentalDecorators": true,
+        "preserveSymlinks": true,
+        "moduleResolution": "node",
+        "noEmit": false,
+        "lib": [
+            "ES2021"
+        ],
+        "sourceMap": true,
+        "declarationMap": true,
+        "strict": true,
+        "noImplicitReturns": false,
+        "noUnusedLocals": true,
+        "noUnusedParameters": false,
+        "noFallthroughCasesInSwitch": true,
+        "noEmitOnError": false,
+        "noErrorTruncation": false,
+        "allowJs": false,
+        "checkJs": false,
+        "forceConsistentCasingInFileNames": true,
+        "suppressImplicitAnyIndexErrors": true,
+        "stripInternal": true,
+        "noImplicitAny": true,
+        "noImplicitThis": true,
+        "noUncheckedIndexedAccess": true,
+        "strictNullChecks": true,
+        "baseUrl": ".",
+        "target": "ES2021",
+        "module": "ES6",
+        "incremental": true,
+        "removeComments": false,
+        // "paths": {
+        //     "@effect/core": [
+        //         "./packages/core/src/index.ts"
+        //     ],
+        //     "@effect/core/test/*": [
+        //         "./packages/core/test/*"
+        //     ],
+        //     "@effect/core/examples/*": [
+        //         "./packages/core/examples/*"
+        //     ],
+        //     "@effect/core/*": [
+        //         "./packages/core/src/*"
+        //     ],
+        // }
+    },
+    "include": [],
+    "exclude": [
+        "node_modules",
+        "build",
+        "lib"
+    ]
+}
\ No newline at end of file
diff --git a/tsconfig.build.json b/tsconfig.build.json
new file mode 100644
index 0000000..148b428
--- /dev/null
+++ b/tsconfig.build.json
@@ -0,0 +1,13 @@
+{
+    "extends": "./tsconfig.base.json",
+    "compilerOptions": {
+        "outDir": "build/esm",
+        "declarationDir": "build/dts",
+        "tsBuildInfoFile": "build/tsbuildinfo/esm.tsbuildinfo",
+        "tsPlusConfig": "./tsplus.config.json",
+        "rootDir": "_src"
+    },
+    "include": [
+        "_src/**/*.ts"
+    ]
+}
\ No newline at end of file
diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
index 0000000..597ce10
--- /dev/null
+++ b/tsconfig.json
@@ -0,0 +1,18 @@
+{
+  "extends": "./tsconfig.base.json",
+  "compilerOptions": {
+    "tsPlusConfig": "./tsplus.config.json",
+    "tsBuildInfoFile": "build/tsbuildinfo/tsconfig.tsbuildinfo"
+  },
+  "references": [
+    {
+      "path": "./tsconfig.build.json"
+    }
+  ],
+  "ts-node": {
+    "files": true,
+    "require": [
+      "tsconfig-paths/register"
+    ]
+  }
+}
\ No newline at end of file
diff --git a/tsplus.config.json b/tsplus.config.json
new file mode 100644
index 0000000..1f1ceb8
--- /dev/null
+++ b/tsplus.config.json
@@ -0,0 +1,11 @@
+{
+  "importMap": {
+    "^(.*)/packages/([^/]*)/src(.*)/index\\.ts$": "@effect/$2$3",
+    "^(.*)/packages/([^/]*)/src(.*)\\.ts$": "@effect/$2$3",
+    "^(.*)/packages/([^/]*)/test/(.*)\\.ts$": "@effect/$2/test/$3",
+    "^(.*)/packages/([^/]*)/examples/(.*)\\.ts$": "@effect/$2/examples/$3"
+  },
+  "traceMap": {
+    "^(.*)/packages/([^/]*)/(.*)$": "(@effect/$2) $3"
+  }
+}
