{
  "effect/Bigint": [
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "between",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "between"
        }
      ]
    },
    {
      "definitionName": "clamp",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "clamp"
        }
      ]
    },
    {
      "definitionName": "decrement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "decrement"
        }
      ]
    },
    {
      "definitionName": "divide",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "divide"
        }
      ]
    },
    {
      "definitionName": "greaterThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "greaterThan"
        }
      ]
    },
    {
      "definitionName": "greaterThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "greaterThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "increment",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "increment"
        }
      ]
    },
    {
      "definitionName": "isBigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "isBigint"
        }
      ]
    },
    {
      "definitionName": "lessThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "lessThan"
        }
      ]
    },
    {
      "definitionName": "lessThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "lessThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "max",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "max"
        }
      ]
    },
    {
      "definitionName": "min",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "min"
        }
      ]
    },
    {
      "definitionName": "multiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "multiply"
        }
      ]
    },
    {
      "definitionName": "multiplyAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "multiplyAll"
        }
      ]
    },
    {
      "definitionName": "sign",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "sign"
        }
      ]
    },
    {
      "definitionName": "subtract",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "subtract"
        }
      ]
    },
    {
      "definitionName": "sum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "sum"
        }
      ]
    },
    {
      "definitionName": "sumAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Bigint.Ops",
          "name": "sumAll"
        }
      ]
    }
  ],
  "effect/Boolean": [
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "and",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "and"
        }
      ]
    },
    {
      "definitionName": "eqv",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "eqv"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "every"
        }
      ]
    },
    {
      "definitionName": "implies",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "implies"
        }
      ]
    },
    {
      "definitionName": "isBoolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "isBoolean"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "nand",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "nand"
        }
      ]
    },
    {
      "definitionName": "nor",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "nor"
        }
      ]
    },
    {
      "definitionName": "not",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "not"
        }
      ]
    },
    {
      "definitionName": "or",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "or"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "xor",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Boolean.Ops",
          "name": "xor"
        }
      ]
    }
  ],
  "effect/Brand": [
    {
      "definitionName": "Brand",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Brand"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Brand.Ops"
        }
      ]
    },
    {
      "definitionName": "Branded",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Brand.ed"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Brand.ed.Ops"
        }
      ]
    },
    {
      "definitionName": "BrandTypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Brand.TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Brand.TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "RefinedConstructorsTypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Brand/RefinedConstructorsTypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Brand/RefinedConstructorsTypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "BrandTypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Brand.TypeId.Ops",
          "name": "BrandTypeId"
        }
      ]
    },
    {
      "definitionName": "RefinedConstructorsTypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Brand/RefinedConstructorsTypeId.Ops",
          "name": "RefinedConstructorsTypeId"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Brand.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "error",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Brand.Ops",
          "name": "error"
        }
      ]
    },
    {
      "definitionName": "errors",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Brand.Ops",
          "name": "errors"
        }
      ]
    },
    {
      "definitionName": "nominal",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Brand.Ops",
          "name": "nominal"
        }
      ]
    },
    {
      "definitionName": "refined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "refined"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "refined"
        }
      ]
    }
  ],
  "effect/Chunk": [
    {
      "definitionName": "Chunk",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Chunk"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Chunk.Ops"
        }
      ]
    },
    {
      "definitionName": "ChunkTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Chunk.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Chunk.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "NonEmptyChunk",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Chunk/NonEmptyChunk"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Chunk/NonEmptyChunk.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Chunk/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Chunk/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "append",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Chunk",
          "kind": "pipeable-operator",
          "name": "<<"
        },
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "append"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "append"
        }
      ]
    },
    {
      "definitionName": "appendAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "appendAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "appendAll"
        }
      ]
    },
    {
      "definitionName": "appendAllNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk/NonEmptyChunk",
          "name": "appendAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk/NonEmptyChunk.Ops",
          "name": "appendAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "chunksOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "chunksOf"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "chunksOf"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Chunk",
          "kind": "getter",
          "name": "compact"
        },
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "contains",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "contains"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "contains"
        }
      ]
    },
    {
      "definitionName": "containsWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "containsWith"
        }
      ]
    },
    {
      "definitionName": "dedupe",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "dedupe"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "dedupe"
        }
      ]
    },
    {
      "definitionName": "dedupeAdjacent",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "dedupeAdjacent"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "dedupeAdjacent"
        }
      ]
    },
    {
      "definitionName": "drop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "drop"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "drop"
        }
      ]
    },
    {
      "definitionName": "dropRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "dropRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "dropRight"
        }
      ]
    },
    {
      "definitionName": "dropWhile",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "dropWhile"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "dropWhile"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "every"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "every"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Chunk",
          "kind": "pipeable",
          "name": "filterMap"
        },
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "filterMapWhile",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Chunk",
          "kind": "pipeable",
          "name": "filterMap"
        },
        {
          "typeName": "effect/data/Chunk",
          "kind": "pipeable",
          "name": "filterMapWhile"
        },
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "filterMapWhile"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "filterMapWhile"
        }
      ]
    },
    {
      "definitionName": "findFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "findFirst"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "findFirst"
        }
      ]
    },
    {
      "definitionName": "findFirstIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "findFirstIndex"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "findFirstIndex"
        }
      ]
    },
    {
      "definitionName": "findLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "findLast"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "findLast"
        }
      ]
    },
    {
      "definitionName": "findLastIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "findLastIndex"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "findLastIndex"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "flatMapNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk/NonEmptyChunk",
          "name": "flatMapNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk/NonEmptyChunk.Ops",
          "name": "flatMapNonEmpty"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "flatten"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "flatten"
        }
      ]
    },
    {
      "definitionName": "flattenNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk/NonEmptyChunk",
          "name": "flattenNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk/NonEmptyChunk.Ops",
          "name": "flattenNonEmpty"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "forEach"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Equivalence",
          "name": "getEquivalence"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "head",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "head"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "head"
        }
      ]
    },
    {
      "definitionName": "headNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk/NonEmptyChunk",
          "name": "headNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk/NonEmptyChunk.Ops",
          "name": "headNonEmpty"
        }
      ]
    },
    {
      "definitionName": "intersection",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "intersection"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "intersection"
        }
      ]
    },
    {
      "definitionName": "isChunk",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "isChunk"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "isEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "isNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "isNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "isNonEmpty"
        }
      ]
    },
    {
      "definitionName": "join",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "join"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "join"
        }
      ]
    },
    {
      "definitionName": "last",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "last"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "last"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Chunk.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "makeBy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "makeBy"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "mapAccum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "mapAccum"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "mapAccum"
        }
      ]
    },
    {
      "definitionName": "modify",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "modify"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "modify"
        }
      ]
    },
    {
      "definitionName": "modifyOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "modifyOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "modifyOption"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "partition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "partition"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "partition"
        }
      ]
    },
    {
      "definitionName": "partitionMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "partitionMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "partitionMap"
        }
      ]
    },
    {
      "definitionName": "prepend",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Chunk",
          "kind": "pipeable-operator",
          "name": ">>"
        },
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "prepend"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "prepend"
        }
      ]
    },
    {
      "definitionName": "prependAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "prependAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "prependAll"
        }
      ]
    },
    {
      "definitionName": "prependAllNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk/NonEmptyChunk",
          "name": "prependAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk/NonEmptyChunk.Ops",
          "name": "prependAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "range",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "range"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "reduce"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "reduceRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "reduceRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "reduceRight"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "replace",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "replace"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "replace"
        }
      ]
    },
    {
      "definitionName": "replaceOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "replaceOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "replaceOption"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "separate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "separate"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "separate"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "some"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "sort",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "sort"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "sort"
        }
      ]
    },
    {
      "definitionName": "sortWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "sortWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "sortWith"
        }
      ]
    },
    {
      "definitionName": "split",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "split"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "split"
        }
      ]
    },
    {
      "definitionName": "splitAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "splitAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "splitAt"
        }
      ]
    },
    {
      "definitionName": "splitWhere",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "splitWhere"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "splitWhere"
        }
      ]
    },
    {
      "definitionName": "tail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "tail"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "tail"
        }
      ]
    },
    {
      "definitionName": "tailNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk/NonEmptyChunk",
          "name": "tailNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk/NonEmptyChunk.Ops",
          "name": "tailNonEmpty"
        }
      ]
    },
    {
      "definitionName": "take",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "take"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "take"
        }
      ]
    },
    {
      "definitionName": "takeRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "takeRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "takeRight"
        }
      ]
    },
    {
      "definitionName": "takeWhile",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "takeWhile"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "takeWhile"
        }
      ]
    },
    {
      "definitionName": "toReadonlyArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "toReadonlyArray"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "toReadonlyArray"
        }
      ]
    },
    {
      "definitionName": "union",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "union"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "union"
        }
      ]
    },
    {
      "definitionName": "unsafeFromArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "unsafeFromArray"
        }
      ]
    },
    {
      "definitionName": "unsafeFromNonEmptyArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "unsafeFromNonEmptyArray"
        }
      ]
    },
    {
      "definitionName": "unsafeGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "unsafeGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "unsafeGet"
        }
      ]
    },
    {
      "definitionName": "unsafeHead",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "unsafeHead"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "unsafeHead"
        }
      ]
    },
    {
      "definitionName": "unsafeLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "unsafeLast"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "unsafeLast"
        }
      ]
    },
    {
      "definitionName": "unzip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Chunk",
          "name": "unzip"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "unzip"
        }
      ]
    },
    {
      "definitionName": "zip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "zip"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "zip"
        }
      ]
    },
    {
      "definitionName": "zipWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Chunk",
          "name": "zipWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Chunk.Ops",
          "name": "zipWith"
        }
      ]
    }
  ],
  "effect/Context": [
    {
      "definitionName": "Context",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Context"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Context.Ops"
        }
      ]
    },
    {
      "definitionName": "Tag",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Context/Tag"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Context/Tag.Ops"
        }
      ]
    },
    {
      "definitionName": "TagTypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Context/TagTypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Context/TagTypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "TagUnify",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Context/TagUnify"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Context/TagUnify.Ops"
        }
      ]
    },
    {
      "definitionName": "TagUnifyBlacklist",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Context/TagUnifyBlacklist"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Context/TagUnifyBlacklist.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Context/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Context/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "ValidTagsById",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Context/ValidTagsById"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Context/ValidTagsById.Ops"
        }
      ]
    },
    {
      "definitionName": "Tag",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "Tag"
        }
      ]
    },
    {
      "definitionName": "add",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Context",
          "name": "add"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "add"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Context",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "getOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Context",
          "name": "getOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "getOption"
        }
      ]
    },
    {
      "definitionName": "isContext",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "isContext"
        }
      ]
    },
    {
      "definitionName": "isTag",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "isTag"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "merge",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Context",
          "name": "merge"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "merge"
        }
      ]
    },
    {
      "definitionName": "omit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/Context",
          "name": "omit"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "omit"
        }
      ]
    },
    {
      "definitionName": "pick",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/Context",
          "name": "pick"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "pick"
        }
      ]
    },
    {
      "definitionName": "unsafeGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Context",
          "name": "unsafeGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "unsafeGet"
        }
      ]
    },
    {
      "definitionName": "unsafeMake",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Context.Ops",
          "name": "unsafeMake"
        }
      ]
    }
  ],
  "effect/Data": [
    {
      "definitionName": "Case",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Data/Case"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Data/Case.Ops"
        }
      ]
    },
    {
      "definitionName": "Data",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Data"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Data.Ops"
        }
      ]
    },
    {
      "definitionName": "TaggedEnum",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Data/TaggedEnum"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Data/TaggedEnum.Ops"
        }
      ]
    },
    {
      "definitionName": "Structural",
      "definitionKind": "class",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Data/Structural"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Data/Structural.Ops"
        }
      ]
    },
    {
      "definitionName": "TaggedClass",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "TaggedClass"
        }
      ]
    },
    {
      "definitionName": "array",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "array"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "tagged",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "tagged"
        }
      ]
    },
    {
      "definitionName": "taggedEnum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "taggedEnum"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "unsafeArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "unsafeArray"
        }
      ]
    },
    {
      "definitionName": "unsafeStruct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Data.Ops",
          "name": "unsafeStruct"
        }
      ]
    }
  ],
  "effect/Differ": [
    {
      "definitionName": "Differ",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Differ"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Differ.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Differ/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Differ/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Differ/TypeId.Ops",
          "name": "TypeId"
        }
      ]
    },
    {
      "definitionName": "chunk",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Differ",
          "name": "chunk"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "chunk"
        }
      ]
    },
    {
      "definitionName": "combine",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Differ",
          "name": "combine"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "combine"
        }
      ]
    },
    {
      "definitionName": "diff",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Differ",
          "name": "diff"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "diff"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Differ",
          "name": "empty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "environment",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "environment"
        }
      ]
    },
    {
      "definitionName": "hashMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Differ",
          "name": "hashMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "hashMap"
        }
      ]
    },
    {
      "definitionName": "hashSet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "hashSet"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "orElseEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Differ",
          "name": "orElseEither"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "orElseEither"
        }
      ]
    },
    {
      "definitionName": "patch",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Differ",
          "name": "patch"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "patch"
        }
      ]
    },
    {
      "definitionName": "transform",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Differ",
          "name": "transform"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "transform"
        }
      ]
    },
    {
      "definitionName": "update",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "update"
        }
      ]
    },
    {
      "definitionName": "updateWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "updateWith"
        }
      ]
    },
    {
      "definitionName": "zip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Differ",
          "name": "zip"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Differ.Ops",
          "name": "zip"
        }
      ]
    }
  ],
  "effect/Duration": [
    {
      "definitionName": "Duration",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Duration"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Duration.Ops"
        }
      ]
    },
    {
      "definitionName": "DurationInput",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Duration.Input"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Duration.Input.Ops"
        }
      ]
    },
    {
      "definitionName": "DurationValue",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Duration.Value"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Duration.Value.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Duration/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Duration/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "Unit",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Duration/Unit"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Duration/Unit.Ops"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration",
          "name": "Equivalence"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration",
          "name": "Order"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "between",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "between"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "between"
        }
      ]
    },
    {
      "definitionName": "clamp",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "clamp"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "clamp"
        }
      ]
    },
    {
      "definitionName": "days",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "days"
        }
      ]
    },
    {
      "definitionName": "decode",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Duration.Input",
          "name": "decode"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "decode"
        }
      ]
    },
    {
      "definitionName": "equals",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "equals"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "equals"
        }
      ]
    },
    {
      "definitionName": "greaterThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "greaterThan"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "greaterThan"
        }
      ]
    },
    {
      "definitionName": "greaterThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "greaterThanOrEqualTo"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "greaterThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "hours",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "hours"
        }
      ]
    },
    {
      "definitionName": "infinity",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "infinity"
        }
      ]
    },
    {
      "definitionName": "isDuration",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "isDuration"
        }
      ]
    },
    {
      "definitionName": "lessThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "lessThan"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "lessThan"
        }
      ]
    },
    {
      "definitionName": "lessThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "lessThanOrEqualTo"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "lessThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "matchWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "matchWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "matchWith"
        }
      ]
    },
    {
      "definitionName": "max",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "max"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "max"
        }
      ]
    },
    {
      "definitionName": "micros",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "micros"
        }
      ]
    },
    {
      "definitionName": "millis",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "millis"
        }
      ]
    },
    {
      "definitionName": "min",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "min"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "min"
        }
      ]
    },
    {
      "definitionName": "minutes",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "minutes"
        }
      ]
    },
    {
      "definitionName": "nanos",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "nanos"
        }
      ]
    },
    {
      "definitionName": "seconds",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "seconds"
        }
      ]
    },
    {
      "definitionName": "sum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "sum"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "sum"
        }
      ]
    },
    {
      "definitionName": "times",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Duration.Input",
          "name": "times"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "times"
        }
      ]
    },
    {
      "definitionName": "toHrTime",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Duration.Input",
          "name": "toHrTime"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "toHrTime"
        }
      ]
    },
    {
      "definitionName": "toMillis",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Duration.Input",
          "name": "toMillis"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "toMillis"
        }
      ]
    },
    {
      "definitionName": "toNanos",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Duration.Input",
          "name": "toNanos"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "toNanos"
        }
      ]
    },
    {
      "definitionName": "toSeconds",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Duration.Input",
          "name": "toSeconds"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "toSeconds"
        }
      ]
    },
    {
      "definitionName": "unsafeToNanos",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Duration.Input",
          "name": "unsafeToNanos"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Input.Ops",
          "name": "unsafeToNanos"
        }
      ]
    },
    {
      "definitionName": "weeks",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "weeks"
        }
      ]
    },
    {
      "definitionName": "zero",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Duration.Ops",
          "name": "zero"
        }
      ]
    }
  ],
  "effect/Either": [
    {
      "definitionName": "Either",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Either"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Either.Ops"
        }
      ]
    },
    {
      "definitionName": "EitherTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Either.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Either.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "EitherUnify",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Either.Unify"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Either.Unify.Ops"
        }
      ]
    },
    {
      "definitionName": "EitherUnifyBlacklist",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Either.UnifyBlacklist"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Either.UnifyBlacklist.Ops"
        }
      ]
    },
    {
      "definitionName": "Left",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Either/Left"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Either/Left.Ops"
        }
      ]
    },
    {
      "definitionName": "Right",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Either/Right"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Either/Right.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Either/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Either/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Either/TypeId.Ops",
          "name": "TypeId"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "fromNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "fromNullable"
        }
      ]
    },
    {
      "definitionName": "fromOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "fromOption"
        }
      ]
    },
    {
      "definitionName": "gen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "gen"
        }
      ]
    },
    {
      "definitionName": "gen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/UtilsGen.Ops",
          "name": "gen"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Equivalence",
          "name": "getEquivalence"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "getLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "getLeft"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getLeft"
        }
      ]
    },
    {
      "definitionName": "getOrElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "getOrElse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getOrElse"
        }
      ]
    },
    {
      "definitionName": "getOrNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "getOrNull"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getOrNull"
        }
      ]
    },
    {
      "definitionName": "getOrThrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "getOrThrow"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getOrThrow"
        }
      ]
    },
    {
      "definitionName": "getOrThrowWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "getOrThrowWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getOrThrowWith"
        }
      ]
    },
    {
      "definitionName": "getOrUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "getOrUndefined"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getOrUndefined"
        }
      ]
    },
    {
      "definitionName": "getRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "getRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getRight"
        }
      ]
    },
    {
      "definitionName": "isEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "isEither"
        }
      ]
    },
    {
      "definitionName": "isLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "isLeft"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "isLeft"
        }
      ]
    },
    {
      "definitionName": "isRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "isRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "isRight"
        }
      ]
    },
    {
      "definitionName": "left",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "left"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "mapBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "mapBoth"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "mapBoth"
        }
      ]
    },
    {
      "definitionName": "mapLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "mapLeft"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "mapLeft"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "merge",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "merge"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "merge"
        }
      ]
    },
    {
      "definitionName": "orElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Either",
          "name": "orElse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "orElse"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "right",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Either.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "right"
        }
      ]
    }
  ],
  "effect/Encoding": [
    {
      "definitionName": "DecodeException",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Encoding/DecodeException"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Encoding/DecodeException.Ops"
        }
      ]
    },
    {
      "definitionName": "DecodeExceptionTypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Encoding/DecodeExceptionTypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Encoding/DecodeExceptionTypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "DecodeException",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "DecodeException"
        }
      ]
    },
    {
      "definitionName": "DecodeExceptionTypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding/DecodeExceptionTypeId.Ops",
          "name": "DecodeExceptionTypeId"
        }
      ]
    },
    {
      "definitionName": "decodeBase64",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "decodeBase64"
        }
      ]
    },
    {
      "definitionName": "decodeBase64String",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "decodeBase64String"
        }
      ]
    },
    {
      "definitionName": "decodeBase64Url",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "decodeBase64Url"
        }
      ]
    },
    {
      "definitionName": "decodeBase64UrlString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "decodeBase64UrlString"
        }
      ]
    },
    {
      "definitionName": "decodeHex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "decodeHex"
        }
      ]
    },
    {
      "definitionName": "decodeHexString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "decodeHexString"
        }
      ]
    },
    {
      "definitionName": "encodeBase64",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "encodeBase64"
        }
      ]
    },
    {
      "definitionName": "encodeBase64Url",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "encodeBase64Url"
        }
      ]
    },
    {
      "definitionName": "encodeHex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "encodeHex"
        }
      ]
    },
    {
      "definitionName": "isDecodeException",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Encoding.Ops",
          "name": "isDecodeException"
        }
      ]
    }
  ],
  "effect/Equal": [
    {
      "definitionName": "Equal",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Equal"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Equal.Ops"
        }
      ]
    },
    {
      "definitionName": "equals",
      "definitionKind": "function",
      "extensions": [
        {
          "typeName": "effect/data/Equal",
          "kind": "operator",
          "name": "=="
        },
        {
          "typeName": "ReadonlyArray",
          "kind": "operator",
          "name": "=="
        },
        {
          "typeName": "effect/data/Duration",
          "kind": "operator",
          "name": "=="
        },
        {
          "typeName": "effect/data/Either",
          "kind": "operator",
          "name": "=="
        },
        {
          "typeName": "effect/data/Option",
          "kind": "operator",
          "name": "=="
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equal.Ops",
          "name": "equals"
        }
      ]
    },
    {
      "definitionName": "equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equal.Ops",
          "name": "equivalence"
        }
      ]
    },
    {
      "definitionName": "isEqual",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equal.Ops",
          "name": "isEqual"
        }
      ]
    },
    {
      "definitionName": "symbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equal/symbol.Ops",
          "name": "symbol"
        }
      ]
    }
  ],
  "effect/Equivalence": [
    {
      "definitionName": "Equivalence",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Equivalence"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Equivalence.Ops"
        }
      ]
    },
    {
      "definitionName": "EquivalenceTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Equivalence.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Equivalence.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "Date",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "Date"
        }
      ]
    },
    {
      "definitionName": "Date",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "Date"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "array",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Equivalence",
          "name": "array"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "array"
        }
      ]
    },
    {
      "definitionName": "bigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "bigint"
        }
      ]
    },
    {
      "definitionName": "bigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "bigint"
        }
      ]
    },
    {
      "definitionName": "boolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "boolean"
        }
      ]
    },
    {
      "definitionName": "boolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "boolean"
        }
      ]
    },
    {
      "definitionName": "combine",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Equivalence",
          "name": "combine"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "combine"
        }
      ]
    },
    {
      "definitionName": "combineAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "combineAll"
        }
      ]
    },
    {
      "definitionName": "combineMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Equivalence",
          "name": "combineMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "combineMany"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Equivalence.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "mapInput",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Equivalence",
          "name": "mapInput"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "mapInput"
        }
      ]
    },
    {
      "definitionName": "number",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "number"
        }
      ]
    },
    {
      "definitionName": "number",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "number"
        }
      ]
    },
    {
      "definitionName": "product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Equivalence",
          "name": "product"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "product"
        }
      ]
    },
    {
      "definitionName": "productMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Equivalence",
          "name": "productMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "productMany"
        }
      ]
    },
    {
      "definitionName": "strict",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "strict"
        }
      ]
    },
    {
      "definitionName": "string",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "string"
        }
      ]
    },
    {
      "definitionName": "string",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "string"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "symbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "symbol"
        }
      ]
    },
    {
      "definitionName": "symbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "symbol"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "tuple"
        }
      ]
    }
  ],
  "effect/Function": [
    {
      "definitionName": "FunctionN",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Function.N"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Function.N.Ops"
        }
      ]
    },
    {
      "definitionName": "FunctionTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Function.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Function.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "LazyArg",
      "definitionKind": "interface",
      "extensions": [
        {
          "typeName": "tsplus/LazyArgument",
          "kind": "type"
        },
        {
          "kind": "type",
          "typeName": "effect/data/Function/LazyArg"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Function/LazyArg.Ops"
        }
      ]
    },
    {
      "definitionName": "SK",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "SK"
        }
      ]
    },
    {
      "definitionName": "absurd",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "absurd"
        }
      ]
    },
    {
      "definitionName": "apply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "apply"
        }
      ]
    },
    {
      "definitionName": "compose",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "compose"
        }
      ]
    },
    {
      "definitionName": "constant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "constant"
        }
      ]
    },
    {
      "definitionName": "constFalse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "constFalse"
        }
      ]
    },
    {
      "definitionName": "constFalse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function/LazyArg.Ops",
          "name": "constFalse"
        }
      ]
    },
    {
      "definitionName": "constNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "constNull"
        }
      ]
    },
    {
      "definitionName": "constNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function/LazyArg.Ops",
          "name": "constNull"
        }
      ]
    },
    {
      "definitionName": "constTrue",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "constTrue"
        }
      ]
    },
    {
      "definitionName": "constTrue",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function/LazyArg.Ops",
          "name": "constTrue"
        }
      ]
    },
    {
      "definitionName": "constUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "constUndefined"
        }
      ]
    },
    {
      "definitionName": "constUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function/LazyArg.Ops",
          "name": "constUndefined"
        }
      ]
    },
    {
      "definitionName": "constVoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "constVoid"
        }
      ]
    },
    {
      "definitionName": "constVoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function/LazyArg.Ops",
          "name": "constVoid"
        }
      ]
    },
    {
      "definitionName": "dual",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "dual"
        }
      ]
    },
    {
      "definitionName": "flip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "flip"
        }
      ]
    },
    {
      "definitionName": "flow",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "flow"
        }
      ]
    },
    {
      "definitionName": "hole",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "hole"
        }
      ]
    },
    {
      "definitionName": "identity",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "identity"
        }
      ]
    },
    {
      "definitionName": "isFunction",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "isFunction"
        }
      ]
    },
    {
      "definitionName": "pipe",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "pipe"
        }
      ]
    },
    {
      "definitionName": "tupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "tupled"
        }
      ]
    },
    {
      "definitionName": "unsafeCoerce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "unsafeCoerce"
        }
      ]
    },
    {
      "definitionName": "untupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Function.Ops",
          "name": "untupled"
        }
      ]
    }
  ],
  "effect/GlobalValue": [
    {
      "definitionName": "globalValue",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/GlobalValue.Ops",
          "name": "globalValue"
        }
      ]
    }
  ],
  "effect/Hash": [
    {
      "definitionName": "Hash",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Hash"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Hash.Ops"
        }
      ]
    },
    {
      "definitionName": "array",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "array"
        }
      ]
    },
    {
      "definitionName": "combine",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "combine"
        }
      ]
    },
    {
      "definitionName": "hash",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "hash"
        }
      ]
    },
    {
      "definitionName": "isHash",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "isHash"
        }
      ]
    },
    {
      "definitionName": "number",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "number"
        }
      ]
    },
    {
      "definitionName": "optimize",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "optimize"
        }
      ]
    },
    {
      "definitionName": "random",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "random"
        }
      ]
    },
    {
      "definitionName": "string",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "string"
        }
      ]
    },
    {
      "definitionName": "structure",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "structure"
        }
      ]
    },
    {
      "definitionName": "structureKeys",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash.Ops",
          "name": "structureKeys"
        }
      ]
    },
    {
      "definitionName": "symbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Hash/symbol.Ops",
          "name": "symbol"
        }
      ]
    }
  ],
  "effect/HashMap": [
    {
      "definitionName": "HashMap",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/HashMap"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/HashMap.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/HashMap/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/HashMap/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "beginMutation",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashMap",
          "name": "beginMutation"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "beginMutation"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashMap",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "endMutation",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashMap",
          "name": "endMutation"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "endMutation"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "findFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "findFirst"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "findFirst"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "forEach"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "getHash",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "getHash"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "getHash"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "hasHash",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "hasHash"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "hasHash"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "isEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "isHashMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "isHashMap"
        }
      ]
    },
    {
      "definitionName": "keys",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashMap",
          "name": "keys"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "keys"
        }
      ]
    },
    {
      "definitionName": "keySet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashMap",
          "name": "keySet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "keySet"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/HashMap.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "modify",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "modify"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "modify"
        }
      ]
    },
    {
      "definitionName": "modifyAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "modifyAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "modifyAt"
        }
      ]
    },
    {
      "definitionName": "modifyHash",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "modifyHash"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "modifyHash"
        }
      ]
    },
    {
      "definitionName": "mutate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "mutate"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "mutate"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "reduce"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "removeMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "removeMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "removeMany"
        }
      ]
    },
    {
      "definitionName": "set",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "set"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "set"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashMap",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "union",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "union"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "union"
        }
      ]
    },
    {
      "definitionName": "unsafeGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashMap",
          "name": "unsafeGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "unsafeGet"
        }
      ]
    },
    {
      "definitionName": "values",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashMap",
          "name": "values"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashMap.Ops",
          "name": "values"
        }
      ]
    }
  ],
  "effect/HashSet": [
    {
      "definitionName": "HashSet",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/HashSet"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/HashSet.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/HashSet/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/HashSet/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "add",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "add"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "add"
        }
      ]
    },
    {
      "definitionName": "beginMutation",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashSet",
          "name": "beginMutation"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "beginMutation"
        }
      ]
    },
    {
      "definitionName": "difference",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "difference"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "difference"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "endMutation",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashSet",
          "name": "endMutation"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "endMutation"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "every"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "every"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "forEach"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "intersection",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "intersection"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "intersection"
        }
      ]
    },
    {
      "definitionName": "isHashSet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "isHashSet"
        }
      ]
    },
    {
      "definitionName": "isSubset",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "isSubset"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "isSubset"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/HashSet.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "mutate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "mutate"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "mutate"
        }
      ]
    },
    {
      "definitionName": "partition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "partition"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "partition"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "reduce"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashSet",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "some"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "toggle",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "toggle"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "toggle"
        }
      ]
    },
    {
      "definitionName": "union",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/HashSet",
          "name": "union"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "union"
        }
      ]
    },
    {
      "definitionName": "values",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/HashSet",
          "name": "values"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HashSet.Ops",
          "name": "values"
        }
      ]
    }
  ],
  "effect/HKT": [
    {
      "definitionName": "Kind",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/HKT/Kind"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/HKT/Kind.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeClass",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/HKT/TypeClass"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/HKT/TypeClass.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/HKT/TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/HKT/TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "URI",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/HKT/URI.Ops",
          "name": "URI"
        }
      ]
    }
  ],
  "effect/Inspectable": [
    {
      "definitionName": "Inspectable",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Inspectable"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Inspectable.Ops"
        }
      ]
    },
    {
      "definitionName": "NodeInspectSymbol",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Inspectable/NodeInspectSymbol"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Inspectable/NodeInspectSymbol.Ops"
        }
      ]
    },
    {
      "definitionName": "NodeInspectSymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Inspectable/NodeInspectSymbol.Ops",
          "name": "NodeInspectSymbol"
        }
      ]
    },
    {
      "definitionName": "toJSON",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Inspectable.Ops",
          "name": "toJSON"
        }
      ]
    },
    {
      "definitionName": "toString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Inspectable.Ops",
          "name": "toString"
        }
      ]
    }
  ],
  "effect/List": [
    {
      "definitionName": "Cons",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/List/Cons"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/List/Cons.Ops"
        }
      ]
    },
    {
      "definitionName": "List",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/List"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/List.Ops"
        }
      ]
    },
    {
      "definitionName": "Nil",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/List/Nil"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/List/Nil.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/List/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/List/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List/TypeId.Ops",
          "name": "TypeId"
        }
      ]
    },
    {
      "definitionName": "append",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "append"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "append"
        }
      ]
    },
    {
      "definitionName": "appendAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "appendAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "appendAll"
        }
      ]
    },
    {
      "definitionName": "appendAllNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List/Cons",
          "name": "appendAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List/Cons.Ops",
          "name": "appendAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "cons",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "cons"
        }
      ]
    },
    {
      "definitionName": "drop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "drop"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "drop"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "every"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "every"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "findFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "findFirst"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "findFirst"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "flatMapNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List/Cons",
          "name": "flatMapNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List/Cons.Ops",
          "name": "flatMapNonEmpty"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "forEach"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Equivalence",
          "name": "getEquivalence"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "head",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "head"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "head"
        }
      ]
    },
    {
      "definitionName": "isCons",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "isCons"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "isCons"
        }
      ]
    },
    {
      "definitionName": "isList",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "isList"
        }
      ]
    },
    {
      "definitionName": "isNil",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "isNil"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "isNil"
        }
      ]
    },
    {
      "definitionName": "last",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "last"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "last"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "nil",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "nil"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "partition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "partition"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "partition"
        }
      ]
    },
    {
      "definitionName": "partitionMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "partitionMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "partitionMap"
        }
      ]
    },
    {
      "definitionName": "prepend",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/List",
          "kind": "pipeable-operator",
          "name": ">>"
        },
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "prepend"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "prepend"
        }
      ]
    },
    {
      "definitionName": "prependAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "prependAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "prependAll"
        }
      ]
    },
    {
      "definitionName": "prependAllNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List/Cons",
          "name": "prependAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List/Cons.Ops",
          "name": "prependAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "prependAllReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "prependAllReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "prependAllReversed"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "reduce"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "reduceRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "reduceRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "reduceRight"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "some"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "splitAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "splitAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "splitAt"
        }
      ]
    },
    {
      "definitionName": "tail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "tail"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "tail"
        }
      ]
    },
    {
      "definitionName": "take",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/List",
          "name": "take"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "take"
        }
      ]
    },
    {
      "definitionName": "toChunk",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "toChunk"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "toChunk"
        }
      ]
    },
    {
      "definitionName": "toReadonlyArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "toReadonlyArray"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "toReadonlyArray"
        }
      ]
    },
    {
      "definitionName": "unsafeHead",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "unsafeHead"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "unsafeHead"
        }
      ]
    },
    {
      "definitionName": "unsafeLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "unsafeLast"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "unsafeLast"
        }
      ]
    },
    {
      "definitionName": "unsafeTail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/List",
          "name": "unsafeTail"
        },
        {
          "kind": "static",
          "typeName": "effect/data/List.Ops",
          "name": "unsafeTail"
        }
      ]
    }
  ],
  "effect/MutableHashMap": [
    {
      "definitionName": "MutableHashMap",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableHashMap"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableHashMap.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableHashMap/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableHashMap/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashMap",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashMap",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/MutableHashMap.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "modify",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashMap",
          "name": "modify"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "modify"
        }
      ]
    },
    {
      "definitionName": "modifyAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashMap",
          "name": "modifyAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "modifyAt"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashMap",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "set",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashMap",
          "name": "set"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "set"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableHashMap",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashMap.Ops",
          "name": "size"
        }
      ]
    }
  ],
  "effect/MutableHashSet": [
    {
      "definitionName": "MutableHashSet",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableHashSet"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableHashSet.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableHashSet/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableHashSet/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "add",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashSet",
          "name": "add"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashSet.Ops",
          "name": "add"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashSet.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashSet.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashSet",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashSet.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/MutableHashSet.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashSet.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableHashSet",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashSet.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableHashSet",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableHashSet.Ops",
          "name": "size"
        }
      ]
    }
  ],
  "effect/MutableList": [
    {
      "definitionName": "MutableList",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableList"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableList.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableList/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableList/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "append",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableList",
          "name": "append"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "append"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableList",
          "name": "forEach"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "head",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableList",
          "name": "head"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "head"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableList",
          "name": "isEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "length",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableList",
          "name": "length"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "length"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "pop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableList",
          "name": "pop"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "pop"
        }
      ]
    },
    {
      "definitionName": "prepend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableList",
          "name": "prepend"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "prepend"
        }
      ]
    },
    {
      "definitionName": "reset",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableList",
          "name": "reset"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "reset"
        }
      ]
    },
    {
      "definitionName": "shift",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableList",
          "name": "shift"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "shift"
        }
      ]
    },
    {
      "definitionName": "tail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableList",
          "name": "tail"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableList.Ops",
          "name": "tail"
        }
      ]
    }
  ],
  "effect/MutableQueue": [
    {
      "definitionName": "MutableQueue",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableQueue"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableQueue.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableQueue/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableQueue/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "EmptyMutableQueue",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue/EmptyMutableQueue.Ops",
          "name": "EmptyMutableQueue"
        }
      ]
    },
    {
      "definitionName": "bounded",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "bounded"
        }
      ]
    },
    {
      "definitionName": "capacity",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableQueue",
          "name": "capacity"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "capacity"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableQueue",
          "name": "isEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "isFull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableQueue",
          "name": "isFull"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "isFull"
        }
      ]
    },
    {
      "definitionName": "length",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableQueue",
          "name": "length"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "length"
        }
      ]
    },
    {
      "definitionName": "offer",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/MutableQueue",
          "name": "offer"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "offer"
        }
      ]
    },
    {
      "definitionName": "offerAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableQueue",
          "name": "offerAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "offerAll"
        }
      ]
    },
    {
      "definitionName": "poll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableQueue",
          "name": "poll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "poll"
        }
      ]
    },
    {
      "definitionName": "pollUpTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableQueue",
          "name": "pollUpTo"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "pollUpTo"
        }
      ]
    },
    {
      "definitionName": "unbounded",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/MutableQueue.Ops",
          "name": "unbounded"
        }
      ]
    }
  ],
  "effect/MutableRef": [
    {
      "definitionName": "MutableRef",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableRef"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableRef.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/MutableRef/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/MutableRef/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "compareAndSet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableRef",
          "name": "compareAndSet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "compareAndSet"
        }
      ]
    },
    {
      "definitionName": "decrement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "decrement"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "decrement"
        }
      ]
    },
    {
      "definitionName": "decrementAndGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "decrementAndGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "decrementAndGet"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "getAndDecrement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "getAndDecrement"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "getAndDecrement"
        }
      ]
    },
    {
      "definitionName": "getAndIncrement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "getAndIncrement"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "getAndIncrement"
        }
      ]
    },
    {
      "definitionName": "getAndSet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableRef",
          "name": "getAndSet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "getAndSet"
        }
      ]
    },
    {
      "definitionName": "getAndUpdate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableRef",
          "name": "getAndUpdate"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "getAndUpdate"
        }
      ]
    },
    {
      "definitionName": "increment",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "increment"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "increment"
        }
      ]
    },
    {
      "definitionName": "incrementAndGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "incrementAndGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "incrementAndGet"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/MutableRef.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "set",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableRef",
          "name": "set"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "set"
        }
      ]
    },
    {
      "definitionName": "setAndGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableRef",
          "name": "setAndGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "setAndGet"
        }
      ]
    },
    {
      "definitionName": "toggle",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/MutableRef",
          "name": "toggle"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "toggle"
        }
      ]
    },
    {
      "definitionName": "update",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableRef",
          "name": "update"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "update"
        }
      ]
    },
    {
      "definitionName": "updateAndGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/MutableRef",
          "name": "updateAndGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/MutableRef.Ops",
          "name": "updateAndGet"
        }
      ]
    }
  ],
  "effect/NonEmptyIterable": [
    {
      "definitionName": "NonEmptyIterable",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/NonEmptyIterable"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/NonEmptyIterable.Ops"
        }
      ]
    },
    {
      "definitionName": "nonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/NonEmptyIterable/nonEmpty.Ops",
          "name": "nonEmpty"
        }
      ]
    },
    {
      "definitionName": "unprepend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/NonEmptyIterable",
          "name": "unprepend"
        },
        {
          "kind": "static",
          "typeName": "effect/data/NonEmptyIterable.Ops",
          "name": "unprepend"
        }
      ]
    }
  ],
  "effect/Number": [
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "between",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "between"
        }
      ]
    },
    {
      "definitionName": "clamp",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "clamp"
        }
      ]
    },
    {
      "definitionName": "decrement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "decrement"
        }
      ]
    },
    {
      "definitionName": "divide",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "divide"
        }
      ]
    },
    {
      "definitionName": "greaterThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "greaterThan"
        }
      ]
    },
    {
      "definitionName": "greaterThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "greaterThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "increment",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "increment"
        }
      ]
    },
    {
      "definitionName": "isNumber",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "isNumber"
        }
      ]
    },
    {
      "definitionName": "lessThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "lessThan"
        }
      ]
    },
    {
      "definitionName": "lessThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "lessThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "max",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "max"
        }
      ]
    },
    {
      "definitionName": "min",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "min"
        }
      ]
    },
    {
      "definitionName": "multiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "multiply"
        }
      ]
    },
    {
      "definitionName": "multiplyAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "multiplyAll"
        }
      ]
    },
    {
      "definitionName": "remainder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "remainder"
        }
      ]
    },
    {
      "definitionName": "sign",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "sign"
        }
      ]
    },
    {
      "definitionName": "subtract",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "subtract"
        }
      ]
    },
    {
      "definitionName": "sum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "sum"
        }
      ]
    },
    {
      "definitionName": "sumAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Number.Ops",
          "name": "sumAll"
        }
      ]
    }
  ],
  "effect/Option": [
    {
      "definitionName": "None",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Option/None"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Option/None.Ops"
        }
      ]
    },
    {
      "definitionName": "Option",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Option"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Option.Ops"
        }
      ]
    },
    {
      "definitionName": "OptionTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Option.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Option.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "OptionUnify",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Option.Unify"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Option.Unify.Ops"
        }
      ]
    },
    {
      "definitionName": "OptionUnifyBlacklist",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Option.UnifyBlacklist"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Option.UnifyBlacklist.Ops"
        }
      ]
    },
    {
      "definitionName": "Some",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Option/Some"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Option/Some.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Option/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Option/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "Do",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "Do"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option/TypeId.Ops",
          "name": "TypeId"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "ap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "ap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "ap"
        }
      ]
    },
    {
      "definitionName": "as",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/Option",
          "name": "as"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "as"
        }
      ]
    },
    {
      "definitionName": "asUnit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Option",
          "name": "asUnit"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "asUnit"
        }
      ]
    },
    {
      "definitionName": "bind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "bind"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "bind"
        }
      ]
    },
    {
      "definitionName": "bindTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "bindTo"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "bindTo"
        }
      ]
    },
    {
      "definitionName": "composeK",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "composeK"
        }
      ]
    },
    {
      "definitionName": "contains",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "contains"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "contains"
        }
      ]
    },
    {
      "definitionName": "containsWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "containsWith"
        }
      ]
    },
    {
      "definitionName": "divide",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/Option",
          "name": "divide"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "divide"
        }
      ]
    },
    {
      "definitionName": "exists",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "exists"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "exists"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "firstSomeOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "firstSomeOf"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "flatMapNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "flatMapNullable"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "flatMapNullable"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Option",
          "name": "flatten"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "flatten"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "fromNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "fromNullable"
        }
      ]
    },
    {
      "definitionName": "gen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "gen"
        }
      ]
    },
    {
      "definitionName": "gen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/UtilsGen.Ops",
          "name": "gen"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Equivalence",
          "name": "getEquivalence"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "getLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "getLeft"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getLeft"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Order",
          "name": "getOrder"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "getOrElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "getOrElse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "getOrElse"
        }
      ]
    },
    {
      "definitionName": "getOrNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Option",
          "name": "getOrNull"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "getOrNull"
        }
      ]
    },
    {
      "definitionName": "getOrThrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Option",
          "name": "getOrThrow"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "getOrThrow"
        }
      ]
    },
    {
      "definitionName": "getOrThrowWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "getOrThrowWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "getOrThrowWith"
        }
      ]
    },
    {
      "definitionName": "getOrUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Option",
          "name": "getOrUndefined"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "getOrUndefined"
        }
      ]
    },
    {
      "definitionName": "getRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Either",
          "name": "getRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Either.Ops",
          "name": "getRight"
        }
      ]
    },
    {
      "definitionName": "isNone",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "isNone"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "isNone"
        }
      ]
    },
    {
      "definitionName": "isOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "isOption"
        }
      ]
    },
    {
      "definitionName": "isSome",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "isSome"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "isSome"
        }
      ]
    },
    {
      "definitionName": "lift2",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "lift2"
        }
      ]
    },
    {
      "definitionName": "liftNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "liftNullable"
        }
      ]
    },
    {
      "definitionName": "liftPredicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "liftPredicate"
        }
      ]
    },
    {
      "definitionName": "liftThrowable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "liftThrowable"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "multiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/Option",
          "name": "multiply"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "multiply"
        }
      ]
    },
    {
      "definitionName": "multiplyCompact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "multiplyCompact"
        }
      ]
    },
    {
      "definitionName": "none",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "none"
        }
      ]
    },
    {
      "definitionName": "orElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "orElse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "orElse"
        }
      ]
    },
    {
      "definitionName": "orElseEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "orElseEither"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "orElseEither"
        }
      ]
    },
    {
      "definitionName": "partitionMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "partitionMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "partitionMap"
        }
      ]
    },
    {
      "definitionName": "product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "product"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "product"
        }
      ]
    },
    {
      "definitionName": "productMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "productMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "productMany"
        }
      ]
    },
    {
      "definitionName": "reduceCompact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "reduceCompact"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/Option.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "subtract",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/Option",
          "name": "subtract"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "subtract"
        }
      ]
    },
    {
      "definitionName": "sum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/Option",
          "name": "sum"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "sum"
        }
      ]
    },
    {
      "definitionName": "sumCompact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "sumCompact"
        }
      ]
    },
    {
      "definitionName": "tap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "tap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "tap"
        }
      ]
    },
    {
      "definitionName": "toArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Option",
          "name": "toArray"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "toArray"
        }
      ]
    },
    {
      "definitionName": "toRefinement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "toRefinement"
        }
      ]
    },
    {
      "definitionName": "unit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "unit"
        }
      ]
    },
    {
      "definitionName": "zipLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "zipLeft"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "zipLeft"
        }
      ]
    },
    {
      "definitionName": "zipRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "zipRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "zipRight"
        }
      ]
    },
    {
      "definitionName": "zipWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Option",
          "name": "zipWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Option.Ops",
          "name": "zipWith"
        }
      ]
    }
  ],
  "effect/Order": [
    {
      "definitionName": "Order",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Order"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Order.Ops"
        }
      ]
    },
    {
      "definitionName": "OrderTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Order.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Order.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "Date",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "Date"
        }
      ]
    },
    {
      "definitionName": "Date",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "Date"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "array",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Order",
          "name": "array"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "array"
        }
      ]
    },
    {
      "definitionName": "between",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "between"
        }
      ]
    },
    {
      "definitionName": "bigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "bigint"
        }
      ]
    },
    {
      "definitionName": "bigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "bigint"
        }
      ]
    },
    {
      "definitionName": "boolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "boolean"
        }
      ]
    },
    {
      "definitionName": "boolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "boolean"
        }
      ]
    },
    {
      "definitionName": "clamp",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "clamp"
        }
      ]
    },
    {
      "definitionName": "combine",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Order",
          "name": "combine"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "combine"
        }
      ]
    },
    {
      "definitionName": "combineAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "combineAll"
        }
      ]
    },
    {
      "definitionName": "combineMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Order",
          "name": "combineMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "combineMany"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "greaterThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "greaterThan"
        }
      ]
    },
    {
      "definitionName": "greaterThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "greaterThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "lessThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "lessThan"
        }
      ]
    },
    {
      "definitionName": "lessThanOrEqualTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "lessThanOrEqualTo"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "mapInput",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Order",
          "name": "mapInput"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "mapInput"
        }
      ]
    },
    {
      "definitionName": "max",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "max"
        }
      ]
    },
    {
      "definitionName": "min",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "min"
        }
      ]
    },
    {
      "definitionName": "number",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "number"
        }
      ]
    },
    {
      "definitionName": "number",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "number"
        }
      ]
    },
    {
      "definitionName": "product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Order",
          "name": "product"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "product"
        }
      ]
    },
    {
      "definitionName": "productMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Order",
          "name": "productMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "productMany"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Order",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "string",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "string"
        }
      ]
    },
    {
      "definitionName": "string",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "string"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "tuple"
        }
      ]
    }
  ],
  "effect/Ordering": [
    {
      "definitionName": "Ordering",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Ordering"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Ordering.Ops"
        }
      ]
    },
    {
      "definitionName": "combine",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Ordering",
          "name": "combine"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Ordering.Ops",
          "name": "combine"
        }
      ]
    },
    {
      "definitionName": "combineAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Ordering.Ops",
          "name": "combineAll"
        }
      ]
    },
    {
      "definitionName": "combineMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Ordering",
          "name": "combineMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Ordering.Ops",
          "name": "combineMany"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Ordering",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Ordering.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Ordering",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Ordering.Ops",
          "name": "reverse"
        }
      ]
    }
  ],
  "effect/PCGRandom": [
    {
      "definitionName": "OptionalNumber",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/PCGRandom/OptionalNumber"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/PCGRandom/OptionalNumber.Ops"
        }
      ]
    },
    {
      "definitionName": "PCGRandomState",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/PCGRandom.State"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/PCGRandom.State.Ops"
        }
      ]
    },
    {
      "definitionName": "PCGRandom",
      "definitionKind": "class",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/PCGRandom"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/PCGRandom.Ops"
        }
      ]
    }
  ],
  "effect/Pipeable": [
    {
      "definitionName": "Pipeable",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Pipeable"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Pipeable.Ops"
        }
      ]
    },
    {
      "definitionName": "pipeArguments",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Pipeable.Ops",
          "name": "pipeArguments"
        }
      ]
    }
  ],
  "effect/Predicate": [
    {
      "definitionName": "Predicate",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Predicate"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Predicate.Ops"
        }
      ]
    },
    {
      "definitionName": "PredicateTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Predicate.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Predicate.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "Refinement",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Predicate/Refinement"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Predicate/Refinement.Ops"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "and",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "and"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "and"
        }
      ]
    },
    {
      "definitionName": "compose",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate/Refinement",
          "name": "compose"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate/Refinement.Ops",
          "name": "compose"
        }
      ]
    },
    {
      "definitionName": "eqv",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "eqv"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "eqv"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "every"
        }
      ]
    },
    {
      "definitionName": "implies",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "implies"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "implies"
        }
      ]
    },
    {
      "definitionName": "isBigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isBigint"
        }
      ]
    },
    {
      "definitionName": "isBoolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isBoolean"
        }
      ]
    },
    {
      "definitionName": "isDate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isDate"
        }
      ]
    },
    {
      "definitionName": "isError",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isError"
        }
      ]
    },
    {
      "definitionName": "isFunction",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isFunction"
        }
      ]
    },
    {
      "definitionName": "isIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isIterable"
        }
      ]
    },
    {
      "definitionName": "isNever",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isNever"
        }
      ]
    },
    {
      "definitionName": "isNotNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isNotNull"
        }
      ]
    },
    {
      "definitionName": "isNotNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isNotNullable"
        }
      ]
    },
    {
      "definitionName": "isNotUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isNotUndefined"
        }
      ]
    },
    {
      "definitionName": "isNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isNull"
        }
      ]
    },
    {
      "definitionName": "isNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isNullable"
        }
      ]
    },
    {
      "definitionName": "isNumber",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isNumber"
        }
      ]
    },
    {
      "definitionName": "isObject",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isObject"
        }
      ]
    },
    {
      "definitionName": "isReadonlyRecord",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isReadonlyRecord"
        }
      ]
    },
    {
      "definitionName": "isRecord",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isRecord"
        }
      ]
    },
    {
      "definitionName": "isString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isString"
        }
      ]
    },
    {
      "definitionName": "isSymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isSymbol"
        }
      ]
    },
    {
      "definitionName": "isTagged",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isTagged"
        }
      ]
    },
    {
      "definitionName": "isUint8Array",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isUint8Array"
        }
      ]
    },
    {
      "definitionName": "isUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isUndefined"
        }
      ]
    },
    {
      "definitionName": "isUnknown",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "isUnknown"
        }
      ]
    },
    {
      "definitionName": "mapInput",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "mapInput"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "mapInput"
        }
      ]
    },
    {
      "definitionName": "nand",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "nand"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "nand"
        }
      ]
    },
    {
      "definitionName": "nor",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "nor"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "nor"
        }
      ]
    },
    {
      "definitionName": "not",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Predicate",
          "name": "not"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "not"
        }
      ]
    },
    {
      "definitionName": "or",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "or"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "or"
        }
      ]
    },
    {
      "definitionName": "product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "product"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "product"
        }
      ]
    },
    {
      "definitionName": "productMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "productMany"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "productMany"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "xor",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/Predicate",
          "name": "xor"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Predicate.Ops",
          "name": "xor"
        }
      ]
    }
  ],
  "effect/ReadonlyArray": [
    {
      "definitionName": "NonEmptyArray",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/ReadonlyArray/NonEmptyArray"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/ReadonlyArray/NonEmptyArray.Ops"
        }
      ]
    },
    {
      "definitionName": "NonEmptyReadonlyArray",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/ReadonlyArray/NonEmptyReadonlyArray"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/ReadonlyArray/NonEmptyReadonlyArray.Ops"
        }
      ]
    },
    {
      "definitionName": "ReadonlyArrayTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/ReadonlyArray.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/ReadonlyArray.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "append",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "append"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "append"
        }
      ]
    },
    {
      "definitionName": "appendAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "appendAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "appendAll"
        }
      ]
    },
    {
      "definitionName": "appendAllNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "appendAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "appendAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "cartesian",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "cartesian"
        }
      ]
    },
    {
      "definitionName": "cartesianWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "cartesianWith"
        }
      ]
    },
    {
      "definitionName": "chop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "chop"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "chop"
        }
      ]
    },
    {
      "definitionName": "chopNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "chopNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "chopNonEmpty"
        }
      ]
    },
    {
      "definitionName": "chunksOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "chunksOf"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "chunksOf"
        }
      ]
    },
    {
      "definitionName": "chunksOfNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "chunksOfNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "chunksOfNonEmpty"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "contains",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "contains"
        }
      ]
    },
    {
      "definitionName": "containsWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "containsWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "containsWith"
        }
      ]
    },
    {
      "definitionName": "copy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "copy"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "copy"
        }
      ]
    },
    {
      "definitionName": "dedupe",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dedupe"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dedupe"
        }
      ]
    },
    {
      "definitionName": "dedupeAdjacent",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dedupeAdjacent"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dedupeAdjacent"
        }
      ]
    },
    {
      "definitionName": "dedupeAdjacentWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dedupeAdjacentWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dedupeAdjacentWith"
        }
      ]
    },
    {
      "definitionName": "dedupeNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dedupeNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dedupeNonEmpty"
        }
      ]
    },
    {
      "definitionName": "dedupeNonEmptyWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dedupeNonEmptyWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dedupeNonEmptyWith"
        }
      ]
    },
    {
      "definitionName": "dedupeWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dedupeWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dedupeWith"
        }
      ]
    },
    {
      "definitionName": "difference",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "difference"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "difference"
        }
      ]
    },
    {
      "definitionName": "differenceWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "differenceWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "differenceWith"
        }
      ]
    },
    {
      "definitionName": "drop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "drop"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "drop"
        }
      ]
    },
    {
      "definitionName": "dropRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dropRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dropRight"
        }
      ]
    },
    {
      "definitionName": "dropWhile",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "dropWhile"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "dropWhile"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "every"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "every"
        }
      ]
    },
    {
      "definitionName": "extend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "extend"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "extend"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "filterMapWhile",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "filterMapWhile"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "filterMapWhile"
        }
      ]
    },
    {
      "definitionName": "findFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "findFirst"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "findFirst"
        }
      ]
    },
    {
      "definitionName": "findFirstIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "findFirstIndex"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "findFirstIndex"
        }
      ]
    },
    {
      "definitionName": "findLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "findLast"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "findLast"
        }
      ]
    },
    {
      "definitionName": "findLastIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "findLastIndex"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "findLastIndex"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "flatMapNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "flatMapNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "flatMapNonEmpty"
        }
      ]
    },
    {
      "definitionName": "flatMapNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "flatMapNullable"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "flatMapNullable"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "flatten"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "flatten"
        }
      ]
    },
    {
      "definitionName": "flattenNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "flattenNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "flattenNonEmpty"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "fromNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "fromNullable"
        }
      ]
    },
    {
      "definitionName": "fromOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "fromOption"
        }
      ]
    },
    {
      "definitionName": "fromRecord",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "fromRecord"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Equivalence",
          "name": "getEquivalence"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Order",
          "name": "getOrder"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "group",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "group"
        }
      ]
    },
    {
      "definitionName": "groupBy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "groupBy"
        }
      ]
    },
    {
      "definitionName": "groupWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "groupWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "groupWith"
        }
      ]
    },
    {
      "definitionName": "head",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "head"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "head"
        }
      ]
    },
    {
      "definitionName": "headNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "headNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "headNonEmpty"
        }
      ]
    },
    {
      "definitionName": "init",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "init"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "init"
        }
      ]
    },
    {
      "definitionName": "initNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "initNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "initNonEmpty"
        }
      ]
    },
    {
      "definitionName": "insertAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "insertAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "insertAt"
        }
      ]
    },
    {
      "definitionName": "intersection",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "intersection"
        }
      ]
    },
    {
      "definitionName": "intersectionWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "intersectionWith"
        }
      ]
    },
    {
      "definitionName": "intersperse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "intersperse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "intersperse"
        }
      ]
    },
    {
      "definitionName": "intersperseNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "intersperseNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "intersperseNonEmpty"
        }
      ]
    },
    {
      "definitionName": "isEmptyArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "isEmptyArray"
        }
      ]
    },
    {
      "definitionName": "isEmptyReadonlyArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "isEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "isEmptyReadonlyArray"
        }
      ]
    },
    {
      "definitionName": "isNonEmptyArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "isNonEmptyArray"
        }
      ]
    },
    {
      "definitionName": "isNonEmptyReadonlyArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "isNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "isNonEmptyReadonlyArray"
        }
      ]
    },
    {
      "definitionName": "join",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "join"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "join"
        }
      ]
    },
    {
      "definitionName": "last",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "last"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "last"
        }
      ]
    },
    {
      "definitionName": "lastNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "lastNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "lastNonEmpty"
        }
      ]
    },
    {
      "definitionName": "length",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "length"
        }
      ]
    },
    {
      "definitionName": "liftEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "liftEither"
        }
      ]
    },
    {
      "definitionName": "liftNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "liftNullable"
        }
      ]
    },
    {
      "definitionName": "liftOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "liftOption"
        }
      ]
    },
    {
      "definitionName": "liftPredicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "liftPredicate"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "makeBy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "makeBy"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "mapAccum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "mapAccum"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "mapAccum"
        }
      ]
    },
    {
      "definitionName": "mapNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "mapNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "mapNonEmpty"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "matchLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "matchLeft"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "matchLeft"
        }
      ]
    },
    {
      "definitionName": "matchRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "matchRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "matchRight"
        }
      ]
    },
    {
      "definitionName": "max",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "max"
        }
      ]
    },
    {
      "definitionName": "min",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "min"
        }
      ]
    },
    {
      "definitionName": "modify",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "modify"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "modify"
        }
      ]
    },
    {
      "definitionName": "modifyNonEmptyHead",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "modifyNonEmptyHead"
        }
      ]
    },
    {
      "definitionName": "modifyNonEmptyLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "modifyNonEmptyLast"
        }
      ]
    },
    {
      "definitionName": "modifyOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "modifyOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "modifyOption"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "partition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "partition"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "partition"
        }
      ]
    },
    {
      "definitionName": "partitionMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "partitionMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "partitionMap"
        }
      ]
    },
    {
      "definitionName": "prepend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "prepend"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "prepend"
        }
      ]
    },
    {
      "definitionName": "prependAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "prependAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "prependAll"
        }
      ]
    },
    {
      "definitionName": "prependAllNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "prependAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "prependAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "range",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "range"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "reduce"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "reduceRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "reduceRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "reduceRight"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "replace",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "replace"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "replace"
        }
      ]
    },
    {
      "definitionName": "replaceOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "replaceOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "replaceOption"
        }
      ]
    },
    {
      "definitionName": "replicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "replicate"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "reverseNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "reverseNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "reverseNonEmpty"
        }
      ]
    },
    {
      "definitionName": "rotate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "rotate"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "rotate"
        }
      ]
    },
    {
      "definitionName": "rotateNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "rotateNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "rotateNonEmpty"
        }
      ]
    },
    {
      "definitionName": "scan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "scan"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "scan"
        }
      ]
    },
    {
      "definitionName": "scanRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "scanRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "scanRight"
        }
      ]
    },
    {
      "definitionName": "separate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "separate"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "separate"
        }
      ]
    },
    {
      "definitionName": "setNonEmptyHead",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "setNonEmptyHead"
        }
      ]
    },
    {
      "definitionName": "setNonEmptyLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "setNonEmptyLast"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "some"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "sort",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "Iterable",
          "name": "sort"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "sort"
        }
      ]
    },
    {
      "definitionName": "sortBy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "Iterable",
          "name": "sortBy"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "sortBy"
        }
      ]
    },
    {
      "definitionName": "sortByNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "Iterable",
          "name": "sortByNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "sortByNonEmpty"
        }
      ]
    },
    {
      "definitionName": "sortNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "Iterable",
          "name": "sortNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "sortNonEmpty"
        }
      ]
    },
    {
      "definitionName": "sortWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "sortWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "sortWith"
        }
      ]
    },
    {
      "definitionName": "span",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "span"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "span"
        }
      ]
    },
    {
      "definitionName": "splitAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "splitAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "splitAt"
        }
      ]
    },
    {
      "definitionName": "splitNonEmptyAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "splitNonEmptyAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "splitNonEmptyAt"
        }
      ]
    },
    {
      "definitionName": "tail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "tail"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "tail"
        }
      ]
    },
    {
      "definitionName": "tailNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "tailNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "tailNonEmpty"
        }
      ]
    },
    {
      "definitionName": "take",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "take"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "take"
        }
      ]
    },
    {
      "definitionName": "takeRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "takeRight"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "takeRight"
        }
      ]
    },
    {
      "definitionName": "takeWhile",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "takeWhile"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "takeWhile"
        }
      ]
    },
    {
      "definitionName": "unappend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unappend"
        }
      ]
    },
    {
      "definitionName": "unfold",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unfold"
        }
      ]
    },
    {
      "definitionName": "union",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "union"
        }
      ]
    },
    {
      "definitionName": "unionNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unionNonEmpty"
        }
      ]
    },
    {
      "definitionName": "unionNonEmptyWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unionNonEmptyWith"
        }
      ]
    },
    {
      "definitionName": "unionWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unionWith"
        }
      ]
    },
    {
      "definitionName": "unprepend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unprepend"
        }
      ]
    },
    {
      "definitionName": "unsafeGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "unsafeGet"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unsafeGet"
        }
      ]
    },
    {
      "definitionName": "unzip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "unzip"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unzip"
        }
      ]
    },
    {
      "definitionName": "unzipNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "unzipNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "unzipNonEmpty"
        }
      ]
    },
    {
      "definitionName": "zip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "zip"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "zip"
        }
      ]
    },
    {
      "definitionName": "zipNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "zipNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "zipNonEmpty"
        }
      ]
    },
    {
      "definitionName": "zipNonEmptyWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "zipNonEmptyWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "zipNonEmptyWith"
        }
      ]
    },
    {
      "definitionName": "zipWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "Iterable",
          "name": "zipWith"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyArray.Ops",
          "name": "zipWith"
        }
      ]
    }
  ],
  "effect/ReadonlyRecord": [
    {
      "definitionName": "ReadonlyRecord",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/ReadonlyRecord"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/ReadonlyRecord.Ops"
        }
      ]
    },
    {
      "definitionName": "ReadonlyRecordTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/ReadonlyRecord.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/ReadonlyRecord.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "collect",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "collect"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "fromEntries",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "fromEntries"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "isEmptyReadonlyRecord",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "isEmptyReadonlyRecord"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "isEmptyReadonlyRecord"
        }
      ]
    },
    {
      "definitionName": "isEmptyRecord",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "isEmptyRecord"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "modifyOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "modifyOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "modifyOption"
        }
      ]
    },
    {
      "definitionName": "partition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "partition"
        }
      ]
    },
    {
      "definitionName": "partitionMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "partitionMap"
        }
      ]
    },
    {
      "definitionName": "pop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "pop"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "pop"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "replaceOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "replaceOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "replaceOption"
        }
      ]
    },
    {
      "definitionName": "separate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "separate"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "separate"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/ReadonlyRecord",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "toArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "toArray"
        }
      ]
    },
    {
      "definitionName": "toEntries",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/ReadonlyRecord.Ops",
          "name": "toEntries"
        }
      ]
    }
  ],
  "effect/RedBlackTree": [
    {
      "definitionName": "RedBlackTree",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/RedBlackTree"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/RedBlackTree.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/RedBlackTree/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/RedBlackTree/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "at",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "at"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "at"
        }
      ]
    },
    {
      "definitionName": "atReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "atReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "atReversed"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Order",
          "name": "empty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "findAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "findAll"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "findAll"
        }
      ]
    },
    {
      "definitionName": "findFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "findFirst"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "findFirst"
        }
      ]
    },
    {
      "definitionName": "first",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "first"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "first"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "forEach"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "forEachBetween",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "forEachBetween"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "forEachBetween"
        }
      ]
    },
    {
      "definitionName": "forEachGreaterThanEqual",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "forEachGreaterThanEqual"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "forEachGreaterThanEqual"
        }
      ]
    },
    {
      "definitionName": "forEachLessThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "forEachLessThan"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "forEachLessThan"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "getAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "getAt"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "getAt"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "getOrder"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "greaterThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "greaterThan"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "greaterThan"
        }
      ]
    },
    {
      "definitionName": "greaterThanEqual",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "greaterThanEqual"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "greaterThanEqual"
        }
      ]
    },
    {
      "definitionName": "greaterThanEqualReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "greaterThanEqualReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "greaterThanEqualReversed"
        }
      ]
    },
    {
      "definitionName": "greaterThanReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "greaterThanReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "greaterThanReversed"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "insert",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "insert"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "insert"
        }
      ]
    },
    {
      "definitionName": "isRedBlackTree",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "isRedBlackTree"
        }
      ]
    },
    {
      "definitionName": "keys",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "keys"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "keys"
        }
      ]
    },
    {
      "definitionName": "keysReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "keysReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "keysReversed"
        }
      ]
    },
    {
      "definitionName": "last",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "last"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "last"
        }
      ]
    },
    {
      "definitionName": "lessThan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "lessThan"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "lessThan"
        }
      ]
    },
    {
      "definitionName": "lessThanEqual",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "lessThanEqual"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "lessThanEqual"
        }
      ]
    },
    {
      "definitionName": "lessThanEqualReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "lessThanEqualReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "lessThanEqualReversed"
        }
      ]
    },
    {
      "definitionName": "lessThanReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "lessThanReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "lessThanReversed"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "reduce"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "removeFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/RedBlackTree",
          "name": "removeFirst"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "removeFirst"
        }
      ]
    },
    {
      "definitionName": "reversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "reversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "reversed"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "values",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "values"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "values"
        }
      ]
    },
    {
      "definitionName": "valuesReversed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/RedBlackTree",
          "name": "valuesReversed"
        },
        {
          "kind": "static",
          "typeName": "effect/data/RedBlackTree.Ops",
          "name": "valuesReversed"
        }
      ]
    }
  ],
  "effect/SortedMap": [
    {
      "definitionName": "SortedMap",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/SortedMap"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/SortedMap.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/SortedMap/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/SortedMap/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Order",
          "name": "empty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "entries",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedMap",
          "name": "entries"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "entries"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedMap",
          "name": "getOrder"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "headOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedMap",
          "name": "headOption"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "headOption"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "isEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "isNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "isNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "isNonEmpty"
        }
      ]
    },
    {
      "definitionName": "isSortedMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "isSortedMap"
        }
      ]
    },
    {
      "definitionName": "keys",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedMap",
          "name": "keys"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "keys"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "effect/data/SortedMap.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "reduce"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "set",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedMap",
          "name": "set"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "set"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedMap",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "values",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedMap",
          "name": "values"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedMap.Ops",
          "name": "values"
        }
      ]
    }
  ],
  "effect/SortedSet": [
    {
      "definitionName": "SortedSet",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/SortedSet"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/SortedSet.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/SortedSet/TypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/SortedSet/TypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "add",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "add"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "add"
        }
      ]
    },
    {
      "definitionName": "difference",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "difference"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "difference"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/Order",
          "name": "empty"
        },
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "every"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "every"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "forEach",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "forEach"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "forEach"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "has"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "intersection",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "intersection"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "intersection"
        }
      ]
    },
    {
      "definitionName": "isSortedSet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "isSortedSet"
        }
      ]
    },
    {
      "definitionName": "isSubset",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "isSubset"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "isSubset"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "partition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "partition"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "partition"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedSet",
          "name": "size"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "some"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "toggle",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "toggle"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "toggle"
        }
      ]
    },
    {
      "definitionName": "union",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "effect/data/SortedSet",
          "name": "union"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "union"
        }
      ]
    },
    {
      "definitionName": "values",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "effect/data/SortedSet",
          "name": "values"
        },
        {
          "kind": "static",
          "typeName": "effect/data/SortedSet.Ops",
          "name": "values"
        }
      ]
    }
  ],
  "effect/String": [
    {
      "definitionName": "Concat",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/String/Concat"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/String/Concat.Ops"
        }
      ]
    },
    {
      "definitionName": "Trim",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/String/Trim"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/String/Trim.Ops"
        }
      ]
    },
    {
      "definitionName": "TrimEnd",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/String/TrimEnd"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/String/TrimEnd.Ops"
        }
      ]
    },
    {
      "definitionName": "TrimStart",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/String/TrimStart"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/String/TrimStart.Ops"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Order.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "at",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "at"
        }
      ]
    },
    {
      "definitionName": "capitalize",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "capitalize"
        }
      ]
    },
    {
      "definitionName": "charAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "charAt"
        }
      ]
    },
    {
      "definitionName": "charCodeAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "charCodeAt"
        }
      ]
    },
    {
      "definitionName": "codePointAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "codePointAt"
        }
      ]
    },
    {
      "definitionName": "concat",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "concat"
        }
      ]
    },
    {
      "definitionName": "endsWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "endsWith"
        }
      ]
    },
    {
      "definitionName": "includes",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "includes"
        }
      ]
    },
    {
      "definitionName": "indexOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "indexOf"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "isNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "isNonEmpty"
        }
      ]
    },
    {
      "definitionName": "isString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "isString"
        }
      ]
    },
    {
      "definitionName": "isString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Predicate/Refinement.Ops",
          "name": "isString"
        }
      ]
    },
    {
      "definitionName": "lastIndexOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "lastIndexOf"
        }
      ]
    },
    {
      "definitionName": "length",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "length"
        }
      ]
    },
    {
      "definitionName": "linesWithSeparators",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "linesWithSeparators"
        }
      ]
    },
    {
      "definitionName": "localeCompare",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "localeCompare"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "matchAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "matchAll"
        }
      ]
    },
    {
      "definitionName": "normalize",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "normalize"
        }
      ]
    },
    {
      "definitionName": "padEnd",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "padEnd"
        }
      ]
    },
    {
      "definitionName": "padStart",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "padStart"
        }
      ]
    },
    {
      "definitionName": "repeat",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "repeat"
        }
      ]
    },
    {
      "definitionName": "replace",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "replace"
        }
      ]
    },
    {
      "definitionName": "replaceAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "replaceAll"
        }
      ]
    },
    {
      "definitionName": "search",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "search"
        }
      ]
    },
    {
      "definitionName": "slice",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "slice"
        }
      ]
    },
    {
      "definitionName": "split",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "split"
        }
      ]
    },
    {
      "definitionName": "startsWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "startsWith"
        }
      ]
    },
    {
      "definitionName": "stripMargin",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "stripMargin"
        }
      ]
    },
    {
      "definitionName": "stripMarginWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "stripMarginWith"
        }
      ]
    },
    {
      "definitionName": "substring",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "substring"
        }
      ]
    },
    {
      "definitionName": "takeLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "takeLeft"
        }
      ]
    },
    {
      "definitionName": "takeRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "takeRight"
        }
      ]
    },
    {
      "definitionName": "toLocaleLowerCase",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "toLocaleLowerCase"
        }
      ]
    },
    {
      "definitionName": "toLocaleUpperCase",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "toLocaleUpperCase"
        }
      ]
    },
    {
      "definitionName": "toLowerCase",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "toLowerCase"
        }
      ]
    },
    {
      "definitionName": "toUpperCase",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "toUpperCase"
        }
      ]
    },
    {
      "definitionName": "trim",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "trim"
        }
      ]
    },
    {
      "definitionName": "trimEnd",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "trimEnd"
        }
      ]
    },
    {
      "definitionName": "trimStart",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "trimStart"
        }
      ]
    },
    {
      "definitionName": "uncapitalize",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/String.Ops",
          "name": "uncapitalize"
        }
      ]
    }
  ],
  "effect/Struct": [
    {
      "definitionName": "evolve",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Struct.Ops",
          "name": "evolve"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Struct.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Struct.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "omit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Struct.Ops",
          "name": "omit"
        }
      ]
    },
    {
      "definitionName": "pick",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Struct.Ops",
          "name": "pick"
        }
      ]
    }
  ],
  "effect/Symbol": [
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Symbol.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "isSymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Symbol.Ops",
          "name": "isSymbol"
        }
      ]
    }
  ],
  "effect/Tuple": [
    {
      "definitionName": "TupleTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Tuple.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Tuple.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "appendElement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "appendElement"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "getFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "getFirst"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "getSecond",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "getSecond"
        }
      ]
    },
    {
      "definitionName": "mapBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "mapBoth"
        }
      ]
    },
    {
      "definitionName": "mapFirst",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "mapFirst"
        }
      ]
    },
    {
      "definitionName": "mapSecond",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "mapSecond"
        }
      ]
    },
    {
      "definitionName": "swap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "swap"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Tuple.Ops",
          "name": "tuple"
        }
      ]
    }
  ],
  "effect/Types": [
    {
      "definitionName": "Equals",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/Equals"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/Equals.Ops"
        }
      ]
    },
    {
      "definitionName": "ExcludeTag",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/ExcludeTag"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/ExcludeTag.Ops"
        }
      ]
    },
    {
      "definitionName": "ExtractTag",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/ExtractTag"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/ExtractTag.Ops"
        }
      ]
    },
    {
      "definitionName": "MergeLeft",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/MergeLeft"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/MergeLeft.Ops"
        }
      ]
    },
    {
      "definitionName": "MergeRight",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/MergeRight"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/MergeRight.Ops"
        }
      ]
    },
    {
      "definitionName": "Simplify",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/Simplify"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/Simplify.Ops"
        }
      ]
    },
    {
      "definitionName": "Tags",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/Tags"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/Tags.Ops"
        }
      ]
    },
    {
      "definitionName": "UnionToIntersection",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Types/UnionToIntersection"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Types/UnionToIntersection.Ops"
        }
      ]
    }
  ],
  "effect/Unify": [
    {
      "definitionName": "Unify",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Unify"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Unify.Ops"
        }
      ]
    },
    {
      "definitionName": "blacklistSymbol",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Unify/blacklistSymbol"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Unify/blacklistSymbol.Ops"
        }
      ]
    },
    {
      "definitionName": "typeSymbol",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Unify/typeSymbol"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Unify/typeSymbol.Ops"
        }
      ]
    },
    {
      "definitionName": "unifySymbol",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/Unify/unifySymbol"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/Unify/unifySymbol.Ops"
        }
      ]
    },
    {
      "definitionName": "blacklistSymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Unify/blacklistSymbol.Ops",
          "name": "blacklistSymbol"
        }
      ]
    },
    {
      "definitionName": "typeSymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Unify/typeSymbol.Ops",
          "name": "typeSymbol"
        }
      ]
    },
    {
      "definitionName": "unify",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Unify.Ops",
          "name": "unify"
        }
      ]
    },
    {
      "definitionName": "unifySymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/Unify/unifySymbol.Ops",
          "name": "unifySymbol"
        }
      ]
    }
  ],
  "effect/UtilsGen": [
    {
      "definitionName": "Adapter",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/UtilsGen/Adapter"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/UtilsGen/Adapter.Ops"
        }
      ]
    },
    {
      "definitionName": "Gen",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/UtilsGen"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/UtilsGen.Ops"
        }
      ]
    },
    {
      "definitionName": "GenKind",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/UtilsGen/GenKind"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/UtilsGen/GenKind.Ops"
        }
      ]
    },
    {
      "definitionName": "GenKindTypeId",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/UtilsGen/GenKindTypeId"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/UtilsGen/GenKindTypeId.Ops"
        }
      ]
    },
    {
      "definitionName": "Variance",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/UtilsGen/Variance"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/UtilsGen/Variance.Ops"
        }
      ]
    },
    {
      "definitionName": "GenKindImpl",
      "definitionKind": "class",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/UtilsGen/GenKindImpl"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/UtilsGen/GenKindImpl.Ops"
        }
      ]
    },
    {
      "definitionName": "GenKindTypeId",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/UtilsGen/GenKindTypeId.Ops",
          "name": "GenKindTypeId"
        }
      ]
    },
    {
      "definitionName": "SingleShotGen",
      "definitionKind": "class",
      "extensions": [
        {
          "kind": "type",
          "typeName": "effect/data/UtilsGen/SingleShotGen"
        },
        {
          "kind": "companion",
          "typeName": "effect/data/UtilsGen/SingleShotGen.Ops"
        }
      ]
    },
    {
      "definitionName": "adapter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "effect/data/HKT/Kind",
          "name": "adapter"
        },
        {
          "kind": "static",
          "typeName": "effect/data/HKT/Kind.Ops",
          "name": "adapter"
        }
      ]
    },
    {
      "definitionName": "makeGenKind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "effect/data/UtilsGen.Ops",
          "name": "makeGenKind"
        }
      ]
    }
  ]
}