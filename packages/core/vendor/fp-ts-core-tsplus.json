{
  "@fp-ts/core/typeclass/Order": [
    {
      "definitionName": "Order",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Order"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Order.Ops"
        }
      ]
    }
  ],
  "@fp-ts/core/typeclass/Equivalence": [
    {
      "definitionName": "Equivalence",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/typeclass/Equivalence"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "strict",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "strict"
        }
      ]
    },
    {
      "definitionName": "equal",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "equal"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "string",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "string"
        }
      ]
    },
    {
      "definitionName": "number",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "number"
        }
      ]
    },
    {
      "definitionName": "bigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "bigint"
        }
      ]
    },
    {
      "definitionName": "symbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "symbol"
        }
      ]
    },
    {
      "definitionName": "contramap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/typeclass/Equivalence",
          "name": "contramap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Aspects",
          "name": "contramap"
        }
      ]
    }
  ],
  "@fp-ts/core/HKT": [
    {
      "definitionName": "TypeClass",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/HKT/TypeClass"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/HKT/TypeClass.Ops"
        }
      ]
    },
    {
      "definitionName": "TypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/HKT/TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/HKT/TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "Kind",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/HKT/Kind"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/HKT/Kind.Ops"
        }
      ]
    },
    {
      "definitionName": "URI",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/HKT/URI.Ops",
          "name": "URI"
        }
      ]
    }
  ],
  "@fp-ts/core/ReadonlyRecord": [
    {
      "definitionName": "ReadonlyRecord",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/ReadonlyRecord"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/ReadonlyRecord.Ops"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/ReadonlyRecord",
          "name": "get"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyRecord.Aspects",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "replaceOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/ReadonlyRecord",
          "name": "replaceOption"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyRecord.Aspects",
          "name": "replaceOption"
        }
      ]
    },
    {
      "definitionName": "modifyOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/ReadonlyRecord",
          "name": "modifyOption"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyRecord.Aspects",
          "name": "modifyOption"
        }
      ]
    }
  ],
  "@fp-ts/core/Option": [
    {
      "definitionName": "OptionTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Option.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Option.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "None",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Option/None"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Option/None.Ops"
        }
      ]
    },
    {
      "definitionName": "Some",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Option/Some"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Option/Some.Ops"
        }
      ]
    },
    {
      "definitionName": "Option",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Option"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Option.Ops"
        }
      ]
    },
    {
      "definitionName": "fromNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "fromNullable"
        }
      ]
    },
    {
      "definitionName": "fromThrowable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "fromThrowable"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "fromEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "fromEither"
        }
      ]
    },
    {
      "definitionName": "none",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "none"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "fp-ts/core/Option.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "isOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "isOption"
        }
      ]
    },
    {
      "definitionName": "toRefinement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "toRefinement"
        }
      ]
    },
    {
      "definitionName": "liftThrowable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "liftThrowable"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "composeKleisliArrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "composeKleisliArrow"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "lift2",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "lift2"
        }
      ]
    },
    {
      "definitionName": "lift3",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "lift3"
        }
      ]
    },
    {
      "definitionName": "getFirstSomeSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "getFirstSomeSemigroup"
        }
      ]
    },
    {
      "definitionName": "traverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "traverse"
        }
      ]
    },
    {
      "definitionName": "traverseTap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "traverseTap"
        }
      ]
    },
    {
      "definitionName": "liftNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "liftNullable"
        }
      ]
    },
    {
      "definitionName": "liftPredicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "liftPredicate"
        }
      ]
    },
    {
      "definitionName": "liftEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "liftEither"
        }
      ]
    },
    {
      "definitionName": "contains",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "contains"
        }
      ]
    },
    {
      "definitionName": "Invariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Invariant.Ops",
          "name": "Invariant"
        }
      ]
    },
    {
      "definitionName": "Covariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Covariant.Ops",
          "name": "Covariant"
        }
      ]
    },
    {
      "definitionName": "Of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Of.Ops",
          "name": "Of"
        }
      ]
    },
    {
      "definitionName": "unit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "unit"
        }
      ]
    },
    {
      "definitionName": "Do",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "Do"
        }
      ]
    },
    {
      "definitionName": "Pointed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Pointed.Ops",
          "name": "Pointed"
        }
      ]
    },
    {
      "definitionName": "FlatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/FlatMap.Ops",
          "name": "FlatMap"
        }
      ]
    },
    {
      "definitionName": "Chainable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Chainable.Ops",
          "name": "Chainable"
        }
      ]
    },
    {
      "definitionName": "Monad",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monad.Ops",
          "name": "Monad"
        }
      ]
    },
    {
      "definitionName": "SemiProduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiProduct.Ops",
          "name": "SemiProduct"
        }
      ]
    },
    {
      "definitionName": "Product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Product.Ops",
          "name": "Product"
        }
      ]
    },
    {
      "definitionName": "SemiApplicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiApplicative.Ops",
          "name": "SemiApplicative"
        }
      ]
    },
    {
      "definitionName": "Applicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Applicative.Ops",
          "name": "Applicative"
        }
      ]
    },
    {
      "definitionName": "SemiCoproduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiCoproduct.Ops",
          "name": "SemiCoproduct"
        }
      ]
    },
    {
      "definitionName": "Coproduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Coproduct.Ops",
          "name": "Coproduct"
        }
      ]
    },
    {
      "definitionName": "SemiAlternative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiAlternative.Ops",
          "name": "SemiAlternative"
        }
      ]
    },
    {
      "definitionName": "Alternative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Alternative.Ops",
          "name": "Alternative"
        }
      ]
    },
    {
      "definitionName": "Foldable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Foldable.Ops",
          "name": "Foldable"
        }
      ]
    },
    {
      "definitionName": "Compactable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Compactable.Ops",
          "name": "Compactable"
        }
      ]
    },
    {
      "definitionName": "Filterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Filterable.Ops",
          "name": "Filterable"
        }
      ]
    },
    {
      "definitionName": "Traversable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Traversable.Ops",
          "name": "Traversable"
        }
      ]
    },
    {
      "definitionName": "getOrThrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "getOrThrow"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "getOrThrow"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "imap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "imap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "imap"
        }
      ]
    },
    {
      "definitionName": "bindTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "bindTo"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "bindTo"
        }
      ]
    },
    {
      "definitionName": "flap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "flap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "flap"
        }
      ]
    },
    {
      "definitionName": "as",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "as"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "as"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "andThen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "andThen"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "andThen"
        }
      ]
    },
    {
      "definitionName": "bind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "bind"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "bind"
        }
      ]
    },
    {
      "definitionName": "tap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "tap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "tap"
        }
      ]
    },
    {
      "definitionName": "inspectSome",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "inspectSome"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "inspectSome"
        }
      ]
    },
    {
      "definitionName": "inspectNone",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "inspectNone"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "inspectNone"
        }
      ]
    },
    {
      "definitionName": "andThenDiscard",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "andThenDiscard"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "andThenDiscard"
        }
      ]
    },
    {
      "definitionName": "andThenBind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "andThenBind"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "andThenBind"
        }
      ]
    },
    {
      "definitionName": "element",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "element"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "element"
        }
      ]
    },
    {
      "definitionName": "ap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "ap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "ap"
        }
      ]
    },
    {
      "definitionName": "firstSomeOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "firstSomeOf"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "firstSomeOf"
        }
      ]
    },
    {
      "definitionName": "coproductEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "coproductEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "coproductEither"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "sequence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "sequence"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "sequence"
        }
      ]
    },
    {
      "definitionName": "toEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "toEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "toEither"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "getOrElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "getOrElse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "getOrElse"
        }
      ]
    },
    {
      "definitionName": "flatMapNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "flatMapNullable"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "flatMapNullable"
        }
      ]
    },
    {
      "definitionName": "catchAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "catchAll"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "catchAll"
        }
      ]
    },
    {
      "definitionName": "orElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "orElse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "orElse"
        }
      ]
    },
    {
      "definitionName": "orElseEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "orElseEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "orElseEither"
        }
      ]
    },
    {
      "definitionName": "orElseSucceed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "orElseSucceed"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "orElseSucceed"
        }
      ]
    },
    {
      "definitionName": "flatMapEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "flatMapEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "flatMapEither"
        }
      ]
    },
    {
      "definitionName": "exists",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "exists"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "exists"
        }
      ]
    },
    {
      "definitionName": "isNone",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/Option",
          "name": "isNone"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "isNone"
        }
      ]
    },
    {
      "definitionName": "isSome",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/Option",
          "name": "isSome"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "isSome"
        }
      ]
    },
    {
      "definitionName": "tupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "tupled"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "tupled"
        }
      ]
    },
    {
      "definitionName": "asUnit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "asUnit"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "asUnit"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "flatten"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "flatten"
        }
      ]
    },
    {
      "definitionName": "getMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Semigroup",
          "name": "getMonoid"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Aspects",
          "name": "getMonoid"
        }
      ]
    },
    {
      "definitionName": "getFirstNoneSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Semigroup",
          "name": "getFirstNoneSemigroup"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Aspects",
          "name": "getFirstNoneSemigroup"
        }
      ]
    },
    {
      "definitionName": "getFirstNoneMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Monoid",
          "name": "getFirstNoneMonoid"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Aspects",
          "name": "getFirstNoneMonoid"
        }
      ]
    },
    {
      "definitionName": "toArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "toArray"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "toArray"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "separate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "separate"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "separate"
        }
      ]
    },
    {
      "definitionName": "getOrNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "getOrNull"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "getOrNull"
        }
      ]
    },
    {
      "definitionName": "getOrUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Option",
          "name": "getOrUndefined"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "getOrUndefined"
        }
      ]
    },
    {
      "definitionName": "liftOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Order",
          "name": "liftOrder"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Order.Aspects",
          "name": "liftOrder"
        }
      ]
    }
  ],
  "@fp-ts/core/Either": [
    {
      "definitionName": "EitherTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Either.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Either.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "Left",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Either/Left"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Either/Left.Ops"
        }
      ]
    },
    {
      "definitionName": "Right",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Either/Right"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Either/Right.Ops"
        }
      ]
    },
    {
      "definitionName": "Either",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Either"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Either.Ops"
        }
      ]
    },
    {
      "definitionName": "fromNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "fromNullable"
        }
      ]
    },
    {
      "definitionName": "fromThrowable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "fromThrowable"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "fromOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "fromOption"
        }
      ]
    },
    {
      "definitionName": "right",
      "definitionKind": "const",
      "extensions": [
        {
          "typeName": "fp-ts/core/Either.Ops",
          "kind": "static",
          "name": "__call"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "right"
        }
      ]
    },
    {
      "definitionName": "left",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "left"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "isEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "isEither"
        }
      ]
    },
    {
      "definitionName": "composeKleisliArrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "composeKleisliArrow"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "lift2",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "lift2"
        }
      ]
    },
    {
      "definitionName": "lift3",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "lift3"
        }
      ]
    },
    {
      "definitionName": "getFirstRightSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "getFirstRightSemigroup"
        }
      ]
    },
    {
      "definitionName": "liftNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "liftNullable"
        }
      ]
    },
    {
      "definitionName": "toRefinement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "toRefinement"
        }
      ]
    },
    {
      "definitionName": "liftThrowable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "liftThrowable"
        }
      ]
    },
    {
      "definitionName": "traverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "traverse"
        }
      ]
    },
    {
      "definitionName": "traverseTap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "traverseTap"
        }
      ]
    },
    {
      "definitionName": "liftOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "liftOption"
        }
      ]
    },
    {
      "definitionName": "contains",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "contains"
        }
      ]
    },
    {
      "definitionName": "Invariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Invariant.Ops",
          "name": "Invariant"
        }
      ]
    },
    {
      "definitionName": "Covariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Covariant.Ops",
          "name": "Covariant"
        }
      ]
    },
    {
      "definitionName": "Bicovariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Bicovariant.Ops",
          "name": "Bicovariant"
        }
      ]
    },
    {
      "definitionName": "Of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Of.Ops",
          "name": "Of"
        }
      ]
    },
    {
      "definitionName": "unit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "unit"
        }
      ]
    },
    {
      "definitionName": "Do",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Ops",
          "name": "Do"
        }
      ]
    },
    {
      "definitionName": "Pointed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Pointed.Ops",
          "name": "Pointed"
        }
      ]
    },
    {
      "definitionName": "FlatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/FlatMap.Ops",
          "name": "FlatMap"
        }
      ]
    },
    {
      "definitionName": "Chainable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Chainable.Ops",
          "name": "Chainable"
        }
      ]
    },
    {
      "definitionName": "Monad",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monad.Ops",
          "name": "Monad"
        }
      ]
    },
    {
      "definitionName": "SemiProduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiProduct.Ops",
          "name": "SemiProduct"
        }
      ]
    },
    {
      "definitionName": "Product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Product.Ops",
          "name": "Product"
        }
      ]
    },
    {
      "definitionName": "SemiApplicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiApplicative.Ops",
          "name": "SemiApplicative"
        }
      ]
    },
    {
      "definitionName": "Applicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Applicative.Ops",
          "name": "Applicative"
        }
      ]
    },
    {
      "definitionName": "SemiCoproduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiCoproduct.Ops",
          "name": "SemiCoproduct"
        }
      ]
    },
    {
      "definitionName": "SemiAlternative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiAlternative.Ops",
          "name": "SemiAlternative"
        }
      ]
    },
    {
      "definitionName": "Foldable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Foldable.Ops",
          "name": "Foldable"
        }
      ]
    },
    {
      "definitionName": "Traversable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Traversable.Ops",
          "name": "Traversable"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "imap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "imap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "imap"
        }
      ]
    },
    {
      "definitionName": "bindTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "bindTo"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "bindTo"
        }
      ]
    },
    {
      "definitionName": "flap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "flap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "flap"
        }
      ]
    },
    {
      "definitionName": "as",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "as"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "as"
        }
      ]
    },
    {
      "definitionName": "bimap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "bimap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "bimap"
        }
      ]
    },
    {
      "definitionName": "mapLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "mapLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "mapLeft"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "andThen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "andThen"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "andThen"
        }
      ]
    },
    {
      "definitionName": "bind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "bind"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "bind"
        }
      ]
    },
    {
      "definitionName": "andThenDiscard",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "andThenDiscard"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "andThenDiscard"
        }
      ]
    },
    {
      "definitionName": "andThenBind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "andThenBind"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "andThenBind"
        }
      ]
    },
    {
      "definitionName": "element",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "element"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "element"
        }
      ]
    },
    {
      "definitionName": "ap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "ap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "ap"
        }
      ]
    },
    {
      "definitionName": "firstSuccessOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "firstSuccessOf"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "firstSuccessOf"
        }
      ]
    },
    {
      "definitionName": "getOrElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "getOrElse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "getOrElse"
        }
      ]
    },
    {
      "definitionName": "catchAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "catchAll"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "catchAll"
        }
      ]
    },
    {
      "definitionName": "orElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "orElse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "orElse"
        }
      ]
    },
    {
      "definitionName": "orElseEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "orElseEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "orElseEither"
        }
      ]
    },
    {
      "definitionName": "orElseFail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "orElseFail"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "orElseFail"
        }
      ]
    },
    {
      "definitionName": "orElseSucceed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "orElseSucceed"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "orElseSucceed"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "flatMapNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "flatMapNullable"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "flatMapNullable"
        }
      ]
    },
    {
      "definitionName": "getOrThrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "getOrThrow"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "getOrThrow"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "sequence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "sequence"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "sequence"
        }
      ]
    },
    {
      "definitionName": "tap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "tap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "tap"
        }
      ]
    },
    {
      "definitionName": "inspectRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "inspectRight"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "inspectRight"
        }
      ]
    },
    {
      "definitionName": "tapError",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "tapError"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "tapError"
        }
      ]
    },
    {
      "definitionName": "inspectLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "inspectLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "inspectLeft"
        }
      ]
    },
    {
      "definitionName": "flatMapOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "flatMapOption"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "flatMapOption"
        }
      ]
    },
    {
      "definitionName": "exists",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Either",
          "name": "exists"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "exists"
        }
      ]
    },
    {
      "definitionName": "isLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/Either",
          "name": "isLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "isLeft"
        }
      ]
    },
    {
      "definitionName": "isRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/Either",
          "name": "isRight"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "isRight"
        }
      ]
    },
    {
      "definitionName": "liftPredicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/Predicate/Refinement",
          "name": "liftPredicate"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Aspects",
          "name": "liftPredicate"
        }
      ]
    },
    {
      "definitionName": "tupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "tupled"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "tupled"
        }
      ]
    },
    {
      "definitionName": "asUnit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "asUnit"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "asUnit"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "flatten"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "flatten"
        }
      ]
    },
    {
      "definitionName": "getFirstLeftSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Semigroup",
          "name": "getFirstLeftSemigroup"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Aspects",
          "name": "getFirstLeftSemigroup"
        }
      ]
    },
    {
      "definitionName": "getFirstLeftMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Monoid",
          "name": "getFirstLeftMonoid"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Aspects",
          "name": "getFirstLeftMonoid"
        }
      ]
    },
    {
      "definitionName": "merge",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "merge"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "merge"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "getLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "getLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "getLeft"
        }
      ]
    },
    {
      "definitionName": "getRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "getRight"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "getRight"
        }
      ]
    },
    {
      "definitionName": "getOrNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "getOrNull"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "getOrNull"
        }
      ]
    },
    {
      "definitionName": "getOrUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Either",
          "name": "getOrUndefined"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Either.Aspects",
          "name": "getOrUndefined"
        }
      ]
    }
  ],
  "@fp-ts/core/ReadonlyArray": [
    {
      "definitionName": "ReadonlyArrayTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/ReadonlyArray.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/ReadonlyArray.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "NonEmptyReadonlyArray",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/ReadonlyArray/NonEmptyReadonlyArray"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/ReadonlyArray/NonEmptyReadonlyArray.Ops"
        }
      ]
    },
    {
      "definitionName": "NonEmptyArray",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/ReadonlyArray/NonEmptyArray"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/ReadonlyArray/NonEmptyArray.Ops"
        }
      ]
    },
    {
      "definitionName": "make",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "make"
        }
      ]
    },
    {
      "definitionName": "makeBy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "makeBy"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "fromOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "fromOption"
        }
      ]
    },
    {
      "definitionName": "fromEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "fromEither"
        }
      ]
    },
    {
      "definitionName": "fromNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "fromNullable"
        }
      ]
    },
    {
      "definitionName": "range",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "range"
        }
      ]
    },
    {
      "definitionName": "replicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "replicate"
        }
      ]
    },
    {
      "definitionName": "unprepend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "unprepend"
        }
      ]
    },
    {
      "definitionName": "unappend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "unappend"
        }
      ]
    },
    {
      "definitionName": "headNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "headNonEmpty"
        }
      ]
    },
    {
      "definitionName": "lastNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "lastNonEmpty"
        }
      ]
    },
    {
      "definitionName": "tailNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "tailNonEmpty"
        }
      ]
    },
    {
      "definitionName": "initNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "initNonEmpty"
        }
      ]
    },
    {
      "definitionName": "reverseNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "reverseNonEmpty"
        }
      ]
    },
    {
      "definitionName": "sortNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "sortNonEmpty"
        }
      ]
    },
    {
      "definitionName": "zipNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "zipNonEmpty"
        }
      ]
    },
    {
      "definitionName": "zipNonEmptyWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "zipNonEmptyWith"
        }
      ]
    },
    {
      "definitionName": "unzipNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "unzipNonEmpty"
        }
      ]
    },
    {
      "definitionName": "intersperseNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "intersperseNonEmpty"
        }
      ]
    },
    {
      "definitionName": "modifyNonEmptyHead",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "modifyNonEmptyHead"
        }
      ]
    },
    {
      "definitionName": "setNonEmptyHead",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "setNonEmptyHead"
        }
      ]
    },
    {
      "definitionName": "modifyNonEmptyLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "modifyNonEmptyLast"
        }
      ]
    },
    {
      "definitionName": "setNonEmptyLast",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "setNonEmptyLast"
        }
      ]
    },
    {
      "definitionName": "rotateNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "rotateNonEmpty"
        }
      ]
    },
    {
      "definitionName": "uniqNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "uniqNonEmpty"
        }
      ]
    },
    {
      "definitionName": "chopNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "chopNonEmpty"
        }
      ]
    },
    {
      "definitionName": "splitNonEmptyAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "splitNonEmptyAt"
        }
      ]
    },
    {
      "definitionName": "chunksOfNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "chunksOfNonEmpty"
        }
      ]
    },
    {
      "definitionName": "group",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "group"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "empty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "empty"
        }
      ]
    },
    {
      "definitionName": "mapNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "mapNonEmpty"
        }
      ]
    },
    {
      "definitionName": "mapNonEmptyWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "mapNonEmptyWithIndex"
        }
      ]
    },
    {
      "definitionName": "flatMapNonEmptyWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "flatMapNonEmptyWithIndex"
        }
      ]
    },
    {
      "definitionName": "flatMapNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "flatMapNonEmpty"
        }
      ]
    },
    {
      "definitionName": "flattenNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "flattenNonEmpty"
        }
      ]
    },
    {
      "definitionName": "composeKleisliArrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "composeKleisliArrow"
        }
      ]
    },
    {
      "definitionName": "traverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traverse"
        }
      ]
    },
    {
      "definitionName": "traverseWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traverseWithIndex"
        }
      ]
    },
    {
      "definitionName": "traverseNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traverseNonEmpty"
        }
      ]
    },
    {
      "definitionName": "traverseNonEmptyWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traverseNonEmptyWithIndex"
        }
      ]
    },
    {
      "definitionName": "traverseTap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traverseTap"
        }
      ]
    },
    {
      "definitionName": "sequenceNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "sequenceNonEmpty"
        }
      ]
    },
    {
      "definitionName": "lift2",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "lift2"
        }
      ]
    },
    {
      "definitionName": "lift3",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "lift3"
        }
      ]
    },
    {
      "definitionName": "liftSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "liftSemigroup"
        }
      ]
    },
    {
      "definitionName": "liftMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "liftMonoid"
        }
      ]
    },
    {
      "definitionName": "foldMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "foldMap"
        }
      ]
    },
    {
      "definitionName": "foldMapWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "foldMapWithIndex"
        }
      ]
    },
    {
      "definitionName": "foldMapNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "foldMapNonEmpty"
        }
      ]
    },
    {
      "definitionName": "foldMapNonEmptyWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "foldMapNonEmptyWithIndex"
        }
      ]
    },
    {
      "definitionName": "reduceKind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "reduceKind"
        }
      ]
    },
    {
      "definitionName": "reduceRightKind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "reduceRightKind"
        }
      ]
    },
    {
      "definitionName": "foldMapKind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "foldMapKind"
        }
      ]
    },
    {
      "definitionName": "traverseFilterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traverseFilterMap"
        }
      ]
    },
    {
      "definitionName": "traversePartitionMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traversePartitionMap"
        }
      ]
    },
    {
      "definitionName": "traverseFilter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traverseFilter"
        }
      ]
    },
    {
      "definitionName": "traversePartition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "traversePartition"
        }
      ]
    },
    {
      "definitionName": "liftPredicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "liftPredicate"
        }
      ]
    },
    {
      "definitionName": "liftOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "liftOption"
        }
      ]
    },
    {
      "definitionName": "liftNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "liftNullable"
        }
      ]
    },
    {
      "definitionName": "liftEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "liftEither"
        }
      ]
    },
    {
      "definitionName": "intercalate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "intercalate"
        }
      ]
    },
    {
      "definitionName": "intercalateNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "intercalateNonEmpty"
        }
      ]
    },
    {
      "definitionName": "min",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "min"
        }
      ]
    },
    {
      "definitionName": "max",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "max"
        }
      ]
    },
    {
      "definitionName": "unfold",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "unfold"
        }
      ]
    },
    {
      "definitionName": "getUnionSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "getUnionSemigroup"
        }
      ]
    },
    {
      "definitionName": "getUnionMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "getUnionMonoid"
        }
      ]
    },
    {
      "definitionName": "getIntersectionSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "getIntersectionSemigroup"
        }
      ]
    },
    {
      "definitionName": "getSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "getSemigroup"
        }
      ]
    },
    {
      "definitionName": "getMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "getMonoid"
        }
      ]
    },
    {
      "definitionName": "liftOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "liftOrder"
        }
      ]
    },
    {
      "definitionName": "slice",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/ReadonlyArray.Ops",
          "name": "slice"
        }
      ]
    },
    {
      "definitionName": "Do",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "ReadonlyArray",
          "name": "Do"
        }
      ]
    },
    {
      "definitionName": "Compactable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Compactable.Ops",
          "name": "Compactable"
        }
      ]
    },
    {
      "definitionName": "Filterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Filterable.Ops",
          "name": "Filterable"
        }
      ]
    },
    {
      "definitionName": "TraversableFilterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/TraversableFilterable.Ops",
          "name": "TraversableFilterable"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "match"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "matchRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "matchRight"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "matchRight"
        }
      ]
    },
    {
      "definitionName": "prepend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "prepend"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "prepend"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "prepend"
        }
      ]
    },
    {
      "definitionName": "prependAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "prependAll"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "prependAll"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "prependAll"
        }
      ]
    },
    {
      "definitionName": "append",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "append"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "append"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "append"
        }
      ]
    },
    {
      "definitionName": "appendAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "appendAll"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "appendAll"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "appendAll"
        }
      ]
    },
    {
      "definitionName": "scan",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "scan"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "scan"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "scan"
        }
      ]
    },
    {
      "definitionName": "scanRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "scanRight"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "scanRight"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "scanRight"
        }
      ]
    },
    {
      "definitionName": "get",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "get"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "get"
        }
      ]
    },
    {
      "definitionName": "unsafeGet",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "unsafeGet"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "unsafeGet"
        }
      ]
    },
    {
      "definitionName": "take",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "take"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "take"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "take"
        }
      ]
    },
    {
      "definitionName": "takeRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "takeRight"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "takeRight"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "takeRight"
        }
      ]
    },
    {
      "definitionName": "drop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "drop"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "drop"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "drop"
        }
      ]
    },
    {
      "definitionName": "dropRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "dropRight"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "dropRight"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "dropRight"
        }
      ]
    },
    {
      "definitionName": "findFirstIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "findFirstIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "findFirstIndex"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "findFirstIndex"
        }
      ]
    },
    {
      "definitionName": "findLastIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "findLastIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "findLastIndex"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "findLastIndex"
        }
      ]
    },
    {
      "definitionName": "insertAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "insertAt"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "insertAt"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "insertAt"
        }
      ]
    },
    {
      "definitionName": "replace",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "replace"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "replace"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "replace"
        }
      ]
    },
    {
      "definitionName": "replaceOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "replaceOption"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "replaceOption"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "replaceOption"
        }
      ]
    },
    {
      "definitionName": "modify",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "modify"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "modify"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "modify"
        }
      ]
    },
    {
      "definitionName": "modifyOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "modifyOption"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "modifyOption"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "modifyOption"
        }
      ]
    },
    {
      "definitionName": "remove",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "remove"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "remove"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "remove"
        }
      ]
    },
    {
      "definitionName": "sort",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "sort"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "sort"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "sort"
        }
      ]
    },
    {
      "definitionName": "sortBy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "sortBy"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "sortBy"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "sortBy"
        }
      ]
    },
    {
      "definitionName": "zip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "zip"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "zip"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "zip"
        }
      ]
    },
    {
      "definitionName": "zipWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "zipWith"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "zipWith"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "zipWith"
        }
      ]
    },
    {
      "definitionName": "intersperse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "intersperse"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "intersperse"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "intersperse"
        }
      ]
    },
    {
      "definitionName": "rotate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "rotate"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "rotate"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "rotate"
        }
      ]
    },
    {
      "definitionName": "elem",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "elem"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "elem"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "elem"
        }
      ]
    },
    {
      "definitionName": "chop",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "chop"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "chop"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "chop"
        }
      ]
    },
    {
      "definitionName": "splitAt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "splitAt"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "splitAt"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "splitAt"
        }
      ]
    },
    {
      "definitionName": "chunksOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "chunksOf"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "chunksOf"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "chunksOf"
        }
      ]
    },
    {
      "definitionName": "groupBy",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "groupBy"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "groupBy"
        },
        {
          "kind": "static",
          "typeName": "Record.Ops",
          "name": "groupBy"
        }
      ]
    },
    {
      "definitionName": "union",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "union"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "union"
        }
      ]
    },
    {
      "definitionName": "intersection",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "intersection"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "intersection"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "intersection"
        }
      ]
    },
    {
      "definitionName": "difference",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "difference"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "difference"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "difference"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "map"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "mapWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "mapWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "mapWithIndex"
        }
      ]
    },
    {
      "definitionName": "imap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "imap"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "imap"
        }
      ]
    },
    {
      "definitionName": "flap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "flap"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "flap"
        }
      ]
    },
    {
      "definitionName": "as",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "as"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "as"
        }
      ]
    },
    {
      "definitionName": "flatMapWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "flatMapWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "flatMapWithIndex"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "flatMap"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "bind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "bind"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "bind"
        }
      ]
    },
    {
      "definitionName": "filterMapWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "filterMapWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "filterMapWithIndex"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "filterMapWithIndex"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "filterMap"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "filter"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "filter"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "filterWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "filterWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "filterWithIndex"
        }
      ]
    },
    {
      "definitionName": "partition",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "partition"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partition"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partition"
        }
      ]
    },
    {
      "definitionName": "partitionWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "partitionWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partitionWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partitionWithIndex"
        }
      ]
    },
    {
      "definitionName": "partitionMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "partitionMap"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partitionMap"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partitionMap"
        }
      ]
    },
    {
      "definitionName": "partitionMapWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "partitionMapWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partitionMapWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "partitionMapWithIndex"
        }
      ]
    },
    {
      "definitionName": "sequence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "sequence"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "sequence"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "sequence"
        }
      ]
    },
    {
      "definitionName": "product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "product"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "product"
        }
      ]
    },
    {
      "definitionName": "productMany",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "productMany"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "productMany"
        }
      ]
    },
    {
      "definitionName": "andThenBind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "andThenBind"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "andThenBind"
        }
      ]
    },
    {
      "definitionName": "ap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "ap"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "ap"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "reduce"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "reduceWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "reduceWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "reduceWithIndex"
        }
      ]
    },
    {
      "definitionName": "reduceRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "reduceRight"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "reduceRight"
        }
      ]
    },
    {
      "definitionName": "reduceRightWithIndex",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "reduceRightWithIndex"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "reduceRightWithIndex"
        }
      ]
    },
    {
      "definitionName": "flatMapNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "flatMapNullable"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "flatMapNullable"
        }
      ]
    },
    {
      "definitionName": "some",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "some"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "some"
        }
      ]
    },
    {
      "definitionName": "has",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "has"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "has"
        }
      ]
    },
    {
      "definitionName": "join",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "join"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "join"
        }
      ]
    },
    {
      "definitionName": "productFlatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "productFlatten"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "productFlatten"
        }
      ]
    },
    {
      "definitionName": "extend",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "extend"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "extend"
        }
      ]
    },
    {
      "definitionName": "prependAllNonEmpty",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "prependAllNonEmpty"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "prependAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "prependAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "appendAllNonEmpty",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "appendAllNonEmpty"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "appendAllNonEmpty"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "appendAllNonEmpty"
        }
      ]
    },
    {
      "definitionName": "takeWhile",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "takeWhile"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "takeWhile"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "takeWhile"
        }
      ]
    },
    {
      "definitionName": "span",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "span"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "span"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "span"
        }
      ]
    },
    {
      "definitionName": "dropWhile",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "dropWhile"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "dropWhile"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "dropWhile"
        }
      ]
    },
    {
      "definitionName": "findFirst",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "findFirst"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "findFirst"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "findFirst"
        }
      ]
    },
    {
      "definitionName": "findLast",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "findLast"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "findLast"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "findLast"
        }
      ]
    },
    {
      "definitionName": "unionNonEmpty",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "unionNonEmpty"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "unionNonEmpty"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "isNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "ReadonlyArray",
          "name": "isNonEmpty"
        }
      ]
    },
    {
      "definitionName": "sortByNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "ReadonlyArray",
          "name": "sortByNonEmpty"
        },
        {
          "kind": "pipeable",
          "typeName": "Array",
          "name": "sortByNonEmpty"
        }
      ]
    },
    {
      "definitionName": "size",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "size"
        }
      ]
    },
    {
      "definitionName": "head",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Array",
          "name": "head"
        },
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "head"
        }
      ]
    },
    {
      "definitionName": "last",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "last"
        }
      ]
    },
    {
      "definitionName": "tail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "tail"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "tail"
        }
      ]
    },
    {
      "definitionName": "init",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "init"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Ops",
          "name": "init"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "rights",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "rights"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "rights"
        }
      ]
    },
    {
      "definitionName": "lefts",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "lefts"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "lefts"
        }
      ]
    },
    {
      "definitionName": "unzip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "unzip"
        },
        {
          "kind": "static",
          "typeName": "Iterable.Ops",
          "name": "unzip"
        }
      ]
    },
    {
      "definitionName": "uniq",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "uniq"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "uniq"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "flatten"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "Array.Ops",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "separate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "ReadonlyArray",
          "name": "separate"
        }
      ]
    },
    {
      "definitionName": "productAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "Iterable",
          "name": "productAll"
        },
        {
          "kind": "static",
          "typeName": "ReadonlyArray.Ops",
          "name": "productAll"
        }
      ]
    },
    {
      "definitionName": "every",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Predicate/Refinement",
          "name": "every"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Aspects",
          "name": "every"
        }
      ]
    }
  ],
  "@fp-ts/core/Function": [
    {
      "definitionName": "FunctionTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Function.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Function.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "LazyArg",
      "definitionKind": "interface",
      "extensions": [
        {
          "typeName": "tsplus/LazyArgument",
          "kind": "type"
        },
        {
          "kind": "type",
          "typeName": "fp-ts/core/Function/LazyArg"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Function/LazyArg.Ops"
        }
      ]
    },
    {
      "definitionName": "FunctionN",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Function.N"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Function.N.Ops"
        }
      ]
    },
    {
      "definitionName": "compose",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "compose"
        }
      ]
    },
    {
      "definitionName": "getSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "getSemigroup"
        }
      ]
    },
    {
      "definitionName": "getMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "getMonoid"
        }
      ]
    },
    {
      "definitionName": "apply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "apply"
        }
      ]
    },
    {
      "definitionName": "identity",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "identity"
        }
      ]
    },
    {
      "definitionName": "unsafeCoerce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "unsafeCoerce"
        }
      ]
    },
    {
      "definitionName": "constant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "constant"
        }
      ]
    },
    {
      "definitionName": "constTrue",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "constTrue"
        }
      ]
    },
    {
      "definitionName": "constFalse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "constFalse"
        }
      ]
    },
    {
      "definitionName": "constNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "constNull"
        }
      ]
    },
    {
      "definitionName": "constUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "constUndefined"
        }
      ]
    },
    {
      "definitionName": "constVoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "constVoid"
        }
      ]
    },
    {
      "definitionName": "flip",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "flip"
        }
      ]
    },
    {
      "definitionName": "absurd",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "absurd"
        }
      ]
    },
    {
      "definitionName": "tupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "tupled"
        }
      ]
    },
    {
      "definitionName": "untupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "untupled"
        }
      ]
    },
    {
      "definitionName": "hole",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "hole"
        }
      ]
    },
    {
      "definitionName": "SK",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "SK"
        }
      ]
    },
    {
      "definitionName": "flow",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "flow"
        }
      ]
    },
    {
      "definitionName": "pipe",
      "definitionKind": "function",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function.Ops",
          "name": "pipe"
        }
      ]
    },
    {
      "definitionName": "constTrue",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function/LazyArg.Ops",
          "name": "constTrue"
        }
      ]
    },
    {
      "definitionName": "constFalse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function/LazyArg.Ops",
          "name": "constFalse"
        }
      ]
    },
    {
      "definitionName": "constNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function/LazyArg.Ops",
          "name": "constNull"
        }
      ]
    },
    {
      "definitionName": "constUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function/LazyArg.Ops",
          "name": "constUndefined"
        }
      ]
    },
    {
      "definitionName": "constVoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Function/LazyArg.Ops",
          "name": "constVoid"
        }
      ]
    }
  ],
  "@fp-ts/core/Predicate": [
    {
      "definitionName": "Predicate",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Predicate"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Predicate.Ops"
        }
      ]
    },
    {
      "definitionName": "PredicateTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Predicate.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Predicate.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "Refinement",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Predicate/Refinement"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Predicate/Refinement.Ops"
        }
      ]
    },
    {
      "definitionName": "isString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "isString"
        }
      ]
    },
    {
      "definitionName": "isNumber",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "isNumber"
        }
      ]
    },
    {
      "definitionName": "isBoolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "isBoolean"
        }
      ]
    },
    {
      "definitionName": "isBigInt",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "isBigInt"
        }
      ]
    },
    {
      "definitionName": "isSymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "isSymbol"
        }
      ]
    },
    {
      "definitionName": "id",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "id"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "Do",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "Do"
        }
      ]
    },
    {
      "definitionName": "unit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "unit"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "getSemigroupAny",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "getSemigroupAny"
        }
      ]
    },
    {
      "definitionName": "getMonoidAny",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "getMonoidAny"
        }
      ]
    },
    {
      "definitionName": "getSemigroupAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "getSemigroupAll"
        }
      ]
    },
    {
      "definitionName": "getMonoidAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "getMonoidAll"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "any",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "any"
        }
      ]
    },
    {
      "definitionName": "isString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Ops",
          "name": "isString"
        }
      ]
    },
    {
      "definitionName": "isNumber",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Ops",
          "name": "isNumber"
        }
      ]
    },
    {
      "definitionName": "isBoolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Ops",
          "name": "isBoolean"
        }
      ]
    },
    {
      "definitionName": "Contravariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Contravariant.Ops",
          "name": "Contravariant"
        }
      ]
    },
    {
      "definitionName": "Invariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Invariant.Ops",
          "name": "Invariant"
        }
      ]
    },
    {
      "definitionName": "Of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Of.Ops",
          "name": "Of"
        }
      ]
    },
    {
      "definitionName": "Do",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "Do"
        }
      ]
    },
    {
      "definitionName": "unit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Ops",
          "name": "unit"
        }
      ]
    },
    {
      "definitionName": "SemiProduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiProduct.Ops",
          "name": "SemiProduct"
        }
      ]
    },
    {
      "definitionName": "Product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Product.Ops",
          "name": "Product"
        }
      ]
    },
    {
      "definitionName": "compose",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate/Refinement",
          "name": "compose"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Aspects",
          "name": "compose"
        }
      ]
    },
    {
      "definitionName": "contramap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate",
          "name": "contramap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "contramap"
        }
      ]
    },
    {
      "definitionName": "imap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate",
          "name": "imap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "imap"
        }
      ]
    },
    {
      "definitionName": "bindTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate",
          "name": "bindTo"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "bindTo"
        }
      ]
    },
    {
      "definitionName": "andThenBind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate",
          "name": "andThenBind"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "andThenBind"
        }
      ]
    },
    {
      "definitionName": "element",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate",
          "name": "element"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "element"
        }
      ]
    },
    {
      "definitionName": "or",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate",
          "name": "or"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "or"
        }
      ]
    },
    {
      "definitionName": "and",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Predicate",
          "name": "and"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "and"
        }
      ]
    },
    {
      "definitionName": "tupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Predicate",
          "name": "tupled"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "tupled"
        }
      ]
    },
    {
      "definitionName": "not",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Predicate",
          "name": "not"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate.Aspects",
          "name": "not"
        }
      ]
    }
  ],
  "@fp-ts/core/Identity": [
    {
      "definitionName": "IdentityTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Identity.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Identity.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "IdentityTypeLambdaFix",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Identity.TypeLambdaFix"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Identity.TypeLambdaFix.Ops"
        }
      ]
    },
    {
      "definitionName": "Identity",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Identity"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Identity.Ops"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "imap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "imap"
        }
      ]
    },
    {
      "definitionName": "tupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "tupled"
        }
      ]
    },
    {
      "definitionName": "bindTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "bindTo"
        }
      ]
    },
    {
      "definitionName": "flap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "flap"
        }
      ]
    },
    {
      "definitionName": "as",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "as"
        }
      ]
    },
    {
      "definitionName": "asUnit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "asUnit"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "flatten"
        }
      ]
    },
    {
      "definitionName": "andThen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "andThen"
        }
      ]
    },
    {
      "definitionName": "composeKleisliArrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "composeKleisliArrow"
        }
      ]
    },
    {
      "definitionName": "bind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "bind"
        }
      ]
    },
    {
      "definitionName": "tap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "tap"
        }
      ]
    },
    {
      "definitionName": "andThenDiscard",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "andThenDiscard"
        }
      ]
    },
    {
      "definitionName": "andThenBind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "andThenBind"
        }
      ]
    },
    {
      "definitionName": "element",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "element"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "lift2",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "lift2"
        }
      ]
    },
    {
      "definitionName": "lift3",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "lift3"
        }
      ]
    },
    {
      "definitionName": "ap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "ap"
        }
      ]
    },
    {
      "definitionName": "reduce",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "reduce"
        }
      ]
    },
    {
      "definitionName": "reduceRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "reduceRight"
        }
      ]
    },
    {
      "definitionName": "foldMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "foldMap"
        }
      ]
    },
    {
      "definitionName": "toArray",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "toArray"
        }
      ]
    },
    {
      "definitionName": "toArrayWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "toArrayWith"
        }
      ]
    },
    {
      "definitionName": "reduceKind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "reduceKind"
        }
      ]
    },
    {
      "definitionName": "reduceRightKind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "reduceRightKind"
        }
      ]
    },
    {
      "definitionName": "foldMapKind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "foldMapKind"
        }
      ]
    },
    {
      "definitionName": "traverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "traverse"
        }
      ]
    },
    {
      "definitionName": "traverseTap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Identity.Ops",
          "name": "traverseTap"
        }
      ]
    },
    {
      "definitionName": "Invariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Invariant.Ops",
          "name": "Invariant"
        }
      ]
    },
    {
      "definitionName": "Covariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Covariant.Ops",
          "name": "Covariant"
        }
      ]
    },
    {
      "definitionName": "Of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Of.Ops",
          "name": "Of"
        }
      ]
    },
    {
      "definitionName": "Pointed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Pointed.Ops",
          "name": "Pointed"
        }
      ]
    },
    {
      "definitionName": "FlatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/FlatMap.Ops",
          "name": "FlatMap"
        }
      ]
    },
    {
      "definitionName": "Chainable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Chainable.Ops",
          "name": "Chainable"
        }
      ]
    },
    {
      "definitionName": "Monad",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monad.Ops",
          "name": "Monad"
        }
      ]
    },
    {
      "definitionName": "SemiProduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiProduct.Ops",
          "name": "SemiProduct"
        }
      ]
    },
    {
      "definitionName": "Product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Product.Ops",
          "name": "Product"
        }
      ]
    },
    {
      "definitionName": "SemiApplicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiApplicative.Ops",
          "name": "SemiApplicative"
        }
      ]
    },
    {
      "definitionName": "Applicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Applicative.Ops",
          "name": "Applicative"
        }
      ]
    },
    {
      "definitionName": "Foldable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Foldable.Ops",
          "name": "Foldable"
        }
      ]
    },
    {
      "definitionName": "Traversable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Traversable.Ops",
          "name": "Traversable"
        }
      ]
    },
    {
      "definitionName": "sequence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/HKT/Kind",
          "name": "sequence"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/HKT/Kind.Aspects",
          "name": "sequence"
        }
      ]
    },
    {
      "definitionName": "liftSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Semigroup",
          "name": "liftSemigroup"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Aspects",
          "name": "liftSemigroup"
        }
      ]
    },
    {
      "definitionName": "liftMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Monoid",
          "name": "liftMonoid"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Aspects",
          "name": "liftMonoid"
        }
      ]
    },
    {
      "definitionName": "getSemiCoproduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Semigroup",
          "name": "getSemiCoproduct"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Aspects",
          "name": "getSemiCoproduct"
        }
      ]
    },
    {
      "definitionName": "getSemiAlternative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Semigroup",
          "name": "getSemiAlternative"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Aspects",
          "name": "getSemiAlternative"
        }
      ]
    }
  ],
  "@fp-ts/core/These": [
    {
      "definitionName": "TheseTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/These.TypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/These.TypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "ValidatedTypeLambda",
      "definitionKind": "interface",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/These/ValidatedTypeLambda"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/These/ValidatedTypeLambda.Ops"
        }
      ]
    },
    {
      "definitionName": "Both",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/These/Both"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/These/Both.Ops"
        }
      ]
    },
    {
      "definitionName": "These",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/These"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/These.Ops"
        }
      ]
    },
    {
      "definitionName": "Validated",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/These/Validated"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/These/Validated.Ops"
        }
      ]
    },
    {
      "definitionName": "fromThrowable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fromThrowable"
        }
      ]
    },
    {
      "definitionName": "fromNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fromNullable"
        }
      ]
    },
    {
      "definitionName": "fromEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fromEither"
        }
      ]
    },
    {
      "definitionName": "fromIterable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fromIterable"
        }
      ]
    },
    {
      "definitionName": "fromOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fromOption"
        }
      ]
    },
    {
      "definitionName": "fromTuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fromTuple"
        }
      ]
    },
    {
      "definitionName": "fromThese",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fromThese"
        }
      ]
    },
    {
      "definitionName": "left",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "left"
        }
      ]
    },
    {
      "definitionName": "right",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "right"
        }
      ]
    },
    {
      "definitionName": "of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "of"
        }
      ]
    },
    {
      "definitionName": "both",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "both"
        }
      ]
    },
    {
      "definitionName": "fail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "fail"
        }
      ]
    },
    {
      "definitionName": "succeed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "succeed"
        }
      ]
    },
    {
      "definitionName": "warn",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "warn"
        }
      ]
    },
    {
      "definitionName": "isThese",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "isThese"
        }
      ]
    },
    {
      "definitionName": "liftThrowable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "liftThrowable"
        }
      ]
    },
    {
      "definitionName": "liftNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "liftNullable"
        }
      ]
    },
    {
      "definitionName": "liftOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "liftOption"
        }
      ]
    },
    {
      "definitionName": "liftEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "liftEither"
        }
      ]
    },
    {
      "definitionName": "liftThese",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "liftThese"
        }
      ]
    },
    {
      "definitionName": "traverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "traverse"
        }
      ]
    },
    {
      "definitionName": "traverseTap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "traverseTap"
        }
      ]
    },
    {
      "definitionName": "contains",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "contains"
        }
      ]
    },
    {
      "definitionName": "getFirstRightOrBothSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "getFirstRightOrBothSemigroup"
        }
      ]
    },
    {
      "definitionName": "lift2",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "lift2"
        }
      ]
    },
    {
      "definitionName": "lift3",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "lift3"
        }
      ]
    },
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "struct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "struct"
        }
      ]
    },
    {
      "definitionName": "composeKleisliArrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "composeKleisliArrow"
        }
      ]
    },
    {
      "definitionName": "Bicovariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Bicovariant.Ops",
          "name": "Bicovariant"
        }
      ]
    },
    {
      "definitionName": "Covariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Covariant.Ops",
          "name": "Covariant"
        }
      ]
    },
    {
      "definitionName": "Invariant",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Invariant.Ops",
          "name": "Invariant"
        }
      ]
    },
    {
      "definitionName": "Of",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Of.Ops",
          "name": "Of"
        }
      ]
    },
    {
      "definitionName": "unit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "unit"
        }
      ]
    },
    {
      "definitionName": "Do",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Ops",
          "name": "Do"
        }
      ]
    },
    {
      "definitionName": "Pointed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Pointed.Ops",
          "name": "Pointed"
        }
      ]
    },
    {
      "definitionName": "Traversable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Traversable.Ops",
          "name": "Traversable"
        }
      ]
    },
    {
      "definitionName": "Foldable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Foldable.Ops",
          "name": "Foldable"
        }
      ]
    },
    {
      "definitionName": "SemiCoproduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiCoproduct.Ops",
          "name": "SemiCoproduct"
        }
      ]
    },
    {
      "definitionName": "SemiAlternative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiAlternative.Ops",
          "name": "SemiAlternative"
        }
      ]
    },
    {
      "definitionName": "SemiProduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiProduct.Ops",
          "name": "SemiProduct"
        }
      ]
    },
    {
      "definitionName": "SemiApplicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/SemiApplicative.Ops",
          "name": "SemiApplicative"
        }
      ]
    },
    {
      "definitionName": "Product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Product.Ops",
          "name": "Product"
        }
      ]
    },
    {
      "definitionName": "Applicative",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Applicative.Ops",
          "name": "Applicative"
        }
      ]
    },
    {
      "definitionName": "FlatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/FlatMap.Ops",
          "name": "FlatMap"
        }
      ]
    },
    {
      "definitionName": "Chainable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Chainable.Ops",
          "name": "Chainable"
        }
      ]
    },
    {
      "definitionName": "Monad",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monad.Ops",
          "name": "Monad"
        }
      ]
    },
    {
      "definitionName": "leftOrBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "leftOrBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "leftOrBoth"
        }
      ]
    },
    {
      "definitionName": "rightOrBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Option",
          "name": "rightOrBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Option.Aspects",
          "name": "rightOrBoth"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "getOrThrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "getOrThrow"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getOrThrow"
        }
      ]
    },
    {
      "definitionName": "getRightOnlyOrThrow",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "getRightOnlyOrThrow"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getRightOnlyOrThrow"
        }
      ]
    },
    {
      "definitionName": "toEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "toEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "toEither"
        }
      ]
    },
    {
      "definitionName": "flatMapNullable",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "flatMapNullable"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "flatMapNullable"
        }
      ]
    },
    {
      "definitionName": "flatMapOption",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "flatMapOption"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "flatMapOption"
        }
      ]
    },
    {
      "definitionName": "flatMapEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "flatMapEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "flatMapEither"
        }
      ]
    },
    {
      "definitionName": "flatMapThese",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "flatMapThese"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "flatMapThese"
        }
      ]
    },
    {
      "definitionName": "getBothOrElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "getBothOrElse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getBothOrElse"
        }
      ]
    },
    {
      "definitionName": "getOrElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "getOrElse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getOrElse"
        }
      ]
    },
    {
      "definitionName": "inspectRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "inspectRight"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "inspectRight"
        }
      ]
    },
    {
      "definitionName": "inspectRightOrBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "inspectRightOrBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "inspectRightOrBoth"
        }
      ]
    },
    {
      "definitionName": "inspectLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "inspectLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "inspectLeft"
        }
      ]
    },
    {
      "definitionName": "inspectBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "inspectBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "inspectBoth"
        }
      ]
    },
    {
      "definitionName": "bimap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "bimap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "bimap"
        }
      ]
    },
    {
      "definitionName": "mapLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "mapLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "mapLeft"
        }
      ]
    },
    {
      "definitionName": "map",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "map"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "map"
        }
      ]
    },
    {
      "definitionName": "imap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "imap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "imap"
        }
      ]
    },
    {
      "definitionName": "bindTo",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "bindTo"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "bindTo"
        }
      ]
    },
    {
      "definitionName": "flap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "flap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "flap"
        }
      ]
    },
    {
      "definitionName": "as",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "as"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "as"
        }
      ]
    },
    {
      "definitionName": "sequence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "sequence"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "sequence"
        }
      ]
    },
    {
      "definitionName": "exists",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "exists"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "exists"
        }
      ]
    },
    {
      "definitionName": "catchAll",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "catchAll"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "catchAll"
        }
      ]
    },
    {
      "definitionName": "orElse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "orElse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "orElse"
        }
      ]
    },
    {
      "definitionName": "orElseEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "orElseEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "orElseEither"
        }
      ]
    },
    {
      "definitionName": "orElseFail",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "orElseFail"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "orElseFail"
        }
      ]
    },
    {
      "definitionName": "orElseSucceed",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "orElseSucceed"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "orElseSucceed"
        }
      ]
    },
    {
      "definitionName": "firstRightOrBothOf",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "firstRightOrBothOf"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "firstRightOrBothOf"
        }
      ]
    },
    {
      "definitionName": "compact",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "compact"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "compact"
        }
      ]
    },
    {
      "definitionName": "filter",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "filter"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "filter"
        }
      ]
    },
    {
      "definitionName": "filterMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These",
          "name": "filterMap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "filterMap"
        }
      ]
    },
    {
      "definitionName": "ap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "ap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "ap"
        }
      ]
    },
    {
      "definitionName": "andThenBind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "andThenBind"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "andThenBind"
        }
      ]
    },
    {
      "definitionName": "andThenBindEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "andThenBindEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "andThenBindEither"
        }
      ]
    },
    {
      "definitionName": "andThenBindThese",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "andThenBindThese"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "andThenBindThese"
        }
      ]
    },
    {
      "definitionName": "element",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "element"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "element"
        }
      ]
    },
    {
      "definitionName": "flatMap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "flatMap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "flatMap"
        }
      ]
    },
    {
      "definitionName": "andThen",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "andThen"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "andThen"
        }
      ]
    },
    {
      "definitionName": "bind",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "bind"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "bind"
        }
      ]
    },
    {
      "definitionName": "bindEither",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "bindEither"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "bindEither"
        }
      ]
    },
    {
      "definitionName": "bindThese",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "bindThese"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "bindThese"
        }
      ]
    },
    {
      "definitionName": "andThenDiscard",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "andThenDiscard"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "andThenDiscard"
        }
      ]
    },
    {
      "definitionName": "tap",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/These/Validated",
          "name": "tap"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "tap"
        }
      ]
    },
    {
      "definitionName": "isLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/These",
          "name": "isLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "isLeft"
        }
      ]
    },
    {
      "definitionName": "isLeftOrBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/These",
          "name": "isLeftOrBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "isLeftOrBoth"
        }
      ]
    },
    {
      "definitionName": "isRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/These",
          "name": "isRight"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "isRight"
        }
      ]
    },
    {
      "definitionName": "isRightOrBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/These",
          "name": "isRightOrBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "isRightOrBoth"
        }
      ]
    },
    {
      "definitionName": "isBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/These",
          "name": "isBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "isBoth"
        }
      ]
    },
    {
      "definitionName": "liftPredicate",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "fluent",
          "typeName": "fp-ts/core/Predicate/Refinement",
          "name": "liftPredicate"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Aspects",
          "name": "liftPredicate"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "reverse"
        }
      ]
    },
    {
      "definitionName": "absolve",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "absolve"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "absolve"
        }
      ]
    },
    {
      "definitionName": "condemn",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "condemn"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "condemn"
        }
      ]
    },
    {
      "definitionName": "getRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "getRight"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getRight"
        }
      ]
    },
    {
      "definitionName": "getRightOnly",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "getRightOnly"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getRightOnly"
        }
      ]
    },
    {
      "definitionName": "getLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "getLeft"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getLeft"
        }
      ]
    },
    {
      "definitionName": "getLeftOnly",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "getLeftOnly"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getLeftOnly"
        }
      ]
    },
    {
      "definitionName": "getBoth",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "getBoth"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getBoth"
        }
      ]
    },
    {
      "definitionName": "getOrNull",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "getOrNull"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getOrNull"
        }
      ]
    },
    {
      "definitionName": "getOrUndefined",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "getOrUndefined"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "getOrUndefined"
        }
      ]
    },
    {
      "definitionName": "tupled",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "tupled"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "tupled"
        }
      ]
    },
    {
      "definitionName": "asUnit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These",
          "name": "asUnit"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These.Aspects",
          "name": "asUnit"
        }
      ]
    },
    {
      "definitionName": "getFirstLeftSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Semigroup",
          "name": "getFirstLeftSemigroup"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Aspects",
          "name": "getFirstLeftSemigroup"
        }
      ]
    },
    {
      "definitionName": "getFirstLeftMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/typeclass/Monoid",
          "name": "getFirstLeftMonoid"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Aspects",
          "name": "getFirstLeftMonoid"
        }
      ]
    },
    {
      "definitionName": "flatten",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/These/Validated",
          "name": "flatten"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/These/Validated.Aspects",
          "name": "flatten"
        }
      ]
    }
  ],
  "@fp-ts/core/Ordering": [
    {
      "definitionName": "Ordering",
      "definitionKind": "type",
      "extensions": [
        {
          "kind": "type",
          "typeName": "fp-ts/core/Ordering"
        },
        {
          "kind": "companion",
          "typeName": "fp-ts/core/Ordering.Ops"
        }
      ]
    },
    {
      "definitionName": "Semigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "Semigroup"
        }
      ]
    },
    {
      "definitionName": "Monoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "Monoid"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "pipeable",
          "typeName": "fp-ts/core/Ordering",
          "name": "match"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Ordering.Aspects",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "reverse",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "getter",
          "typeName": "fp-ts/core/Ordering",
          "name": "reverse"
        },
        {
          "kind": "static",
          "typeName": "fp-ts/core/Ordering.Aspects",
          "name": "reverse"
        }
      ]
    }
  ],
  "@fp-ts/core/String": [
    {
      "definitionName": "isString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "isString"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "concat",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "concat"
        }
      ]
    },
    {
      "definitionName": "toUpperCase",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "toUpperCase"
        }
      ]
    },
    {
      "definitionName": "toLowerCase",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "toLowerCase"
        }
      ]
    },
    {
      "definitionName": "replace",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "replace"
        }
      ]
    },
    {
      "definitionName": "trim",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "trim"
        }
      ]
    },
    {
      "definitionName": "trimStart",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "trimStart"
        }
      ]
    },
    {
      "definitionName": "trimEnd",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "trimEnd"
        }
      ]
    },
    {
      "definitionName": "slice",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "slice"
        }
      ]
    },
    {
      "definitionName": "isEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "isEmpty"
        }
      ]
    },
    {
      "definitionName": "isNonEmpty",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "isNonEmpty"
        }
      ]
    },
    {
      "definitionName": "length",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "length"
        }
      ]
    },
    {
      "definitionName": "split",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "split"
        }
      ]
    },
    {
      "definitionName": "includes",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "includes"
        }
      ]
    },
    {
      "definitionName": "startsWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "startsWith"
        }
      ]
    },
    {
      "definitionName": "endsWith",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "endsWith"
        }
      ]
    },
    {
      "definitionName": "takeLeft",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "takeLeft"
        }
      ]
    },
    {
      "definitionName": "takeRight",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/String.Ops",
          "name": "takeRight"
        }
      ]
    },
    {
      "definitionName": "isString",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Ops",
          "name": "isString"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Order.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "Semigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "Semigroup"
        }
      ]
    },
    {
      "definitionName": "Monoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "Monoid"
        }
      ]
    }
  ],
  "@fp-ts/core/Bigint": [
    {
      "definitionName": "isBigint",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "isBigint"
        }
      ]
    },
    {
      "definitionName": "sum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "sum"
        }
      ]
    },
    {
      "definitionName": "multiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "multiply"
        }
      ]
    },
    {
      "definitionName": "subtract",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "subtract"
        }
      ]
    },
    {
      "definitionName": "divide",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "divide"
        }
      ]
    },
    {
      "definitionName": "increment",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "increment"
        }
      ]
    },
    {
      "definitionName": "decrement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "decrement"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Bigint.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Order.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "SemigroupSum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "SemigroupSum"
        }
      ]
    },
    {
      "definitionName": "SemigroupMultiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "SemigroupMultiply"
        }
      ]
    },
    {
      "definitionName": "MonoidSum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "MonoidSum"
        }
      ]
    },
    {
      "definitionName": "MonoidMultiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "MonoidMultiply"
        }
      ]
    }
  ],
  "@fp-ts/core/Boolean": [
    {
      "definitionName": "isBoolean",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "isBoolean"
        }
      ]
    },
    {
      "definitionName": "match",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "match"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "and",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "and"
        }
      ]
    },
    {
      "definitionName": "or",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "or"
        }
      ]
    },
    {
      "definitionName": "not",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "not"
        }
      ]
    },
    {
      "definitionName": "all",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "all"
        }
      ]
    },
    {
      "definitionName": "any",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Boolean.Ops",
          "name": "any"
        }
      ]
    }
  ],
  "@fp-ts/core/Number": [
    {
      "definitionName": "isNumber",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "isNumber"
        }
      ]
    },
    {
      "definitionName": "sum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "sum"
        }
      ]
    },
    {
      "definitionName": "multiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "multiply"
        }
      ]
    },
    {
      "definitionName": "subtract",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "subtract"
        }
      ]
    },
    {
      "definitionName": "divide",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "divide"
        }
      ]
    },
    {
      "definitionName": "increment",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "increment"
        }
      ]
    },
    {
      "definitionName": "decrement",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "decrement"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "sign",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Number.Ops",
          "name": "sign"
        }
      ]
    },
    {
      "definitionName": "isNumber",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Predicate/Refinement.Ops",
          "name": "isNumber"
        }
      ]
    },
    {
      "definitionName": "Equivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Equivalence.Ops",
          "name": "Equivalence"
        }
      ]
    },
    {
      "definitionName": "Order",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Order.Ops",
          "name": "Order"
        }
      ]
    },
    {
      "definitionName": "Bounded",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Bounded.Ops",
          "name": "Bounded"
        }
      ]
    },
    {
      "definitionName": "SemigroupSum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "SemigroupSum"
        }
      ]
    },
    {
      "definitionName": "SemigroupMax",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "SemigroupMax"
        }
      ]
    },
    {
      "definitionName": "SemigroupMin",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "SemigroupMin"
        }
      ]
    },
    {
      "definitionName": "SemigroupMultiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Semigroup.Ops",
          "name": "SemigroupMultiply"
        }
      ]
    },
    {
      "definitionName": "MonoidSum",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "MonoidSum"
        }
      ]
    },
    {
      "definitionName": "MonoidMultiply",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "MonoidMultiply"
        }
      ]
    },
    {
      "definitionName": "MonoidMax",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "MonoidMax"
        }
      ]
    },
    {
      "definitionName": "MonoidMin",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/typeclass/Monoid.Ops",
          "name": "MonoidMin"
        }
      ]
    }
  ],
  "@fp-ts/core/Struct": [
    {
      "definitionName": "pick",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "pick"
        }
      ]
    },
    {
      "definitionName": "omit",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "omit"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "getSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "getSemigroup"
        }
      ]
    },
    {
      "definitionName": "getMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "getMonoid"
        }
      ]
    },
    {
      "definitionName": "nonEmptyProduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "nonEmptyProduct"
        }
      ]
    },
    {
      "definitionName": "product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Struct.Ops",
          "name": "product"
        }
      ]
    }
  ],
  "@fp-ts/core/Symbol": [
    {
      "definitionName": "isSymbol",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Symbol.Ops",
          "name": "isSymbol"
        }
      ]
    }
  ],
  "@fp-ts/core/Tuple": [
    {
      "definitionName": "tuple",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "tuple"
        }
      ]
    },
    {
      "definitionName": "element",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "element"
        }
      ]
    },
    {
      "definitionName": "getEquivalence",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "getEquivalence"
        }
      ]
    },
    {
      "definitionName": "getOrder",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "getOrder"
        }
      ]
    },
    {
      "definitionName": "getSemigroup",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "getSemigroup"
        }
      ]
    },
    {
      "definitionName": "getMonoid",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "getMonoid"
        }
      ]
    },
    {
      "definitionName": "nonEmptyProduct",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "nonEmptyProduct"
        }
      ]
    },
    {
      "definitionName": "product",
      "definitionKind": "const",
      "extensions": [
        {
          "kind": "static",
          "typeName": "fp-ts/core/Tuple.Ops",
          "name": "product"
        }
      ]
    }
  ]
}