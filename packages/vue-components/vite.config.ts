const path = require('path');
const { defineConfig } = require('vite');
import vue from '@vitejs/plugin-vue';
import cssInjectedByJsPlugin from 'vite-plugin-css-injected-by-js'

module.exports = defineConfig({
  plugins: [
    // Use the default cssInjectedByJsPlugin configuration with injectCode
    cssInjectedByJsPlugin({
      relativeCSSInjection: true,
      injectCode: (cssCode, options) => `
        try {
          if (typeof document != 'undefined') {
            // Standard injection for non-web components
            var elementStyle = document.createElement('style');
            elementStyle.appendChild(document.createTextNode(${cssCode}));
            ${options.styleId ? `elementStyle.id = "${options.styleId}";` : ''}
            document.head.appendChild(elementStyle);
            
            // For web components, also inject into shadow DOM if available
            if (window.customElements) {
              const originalDefine = window.customElements.define;
              window.customElements.define = function(name, constructor) {
                const original = constructor.prototype.connectedCallback;
                constructor.prototype.connectedCallback = function() {
                  if (original) original.call(this);
                  if (this.shadowRoot) {
                    const shadowStyle = document.createElement('style');
                    shadowStyle.appendChild(document.createTextNode(${cssCode}));
                    this.shadowRoot.appendChild(shadowStyle);
                  }
                };
                return originalDefine.call(window.customElements, name, constructor);
              };
            }
          }
        } catch (e) {
          console.error('vite-plugin-css-injected-by-js', e);
        }
      `
    }),
    vue(),
  ],
  build: {
    lib: {
      entry: path.resolve(__dirname, 'src/index.ts'),
      name: 'vue-components',
      formats: ['es'], // adding 'umd' requires globals set to every external module
      fileName: (format) => `vue-components.${format}.js`,
    },
    rollupOptions: {
      // external modules won't be bundled into your library
      external: ['effect', /@effect/, 'effect-app', /@effect-app/, 'vue', /primevue\/.+/, /@tanstack/, /@mdi/, /vuetify/, /intl/], // not every external has a global
      output: {
        // disable warning on src/index.ts using both default and named export
        exports: 'named',
        // Provide global variables to use in the UMD build
        // for externalized deps (not useful if 'umd' is not in lib.formats)
        globals: {
          vue: 'Vue',
        },
        // Add proper scoping for variables
        hoistTransitiveImports: false,
        preserveModules: true,
        preserveModulesRoot: 'src',
      },
    },
    emptyOutDir: false, // to retain the types folder generated by tsc
  },
});
