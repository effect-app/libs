diff --git a/node_modules/typescript/lib/tsc.js b/node_modules/typescript/lib/tsc.js
index 4cfd775..29f7c54 100644
--- a/node_modules/typescript/lib/tsc.js
+++ b/node_modules/typescript/lib/tsc.js
@@ -44919,6 +44919,15 @@ function createTypeChecker(host) {
       return top;
     }
     function getSpecifierForModuleSymbol(symbol, context, overrideImportMode) {
+      let specifier = getSpecifierForModuleSymbol_(symbol, context, overrideImportMode)
+      // ts plus import workaround
+      if (specifier && specifier.indexOf("/node_modules/") > 0) {
+        const r = tryGetImportLocation(fileMap.map, specifier)
+        if (r) { specifier = r }
+      }
+      return specifier
+    }
+    function getSpecifierForModuleSymbol_(symbol, context, overrideImportMode) {
       var _a2;
       let file = getDeclarationOfKind(symbol, 308 /* SourceFile */);
       if (!file) {
@@ -79831,13 +79840,23 @@ function getOriginalNodeId(node) {
   node = getOriginalNode(node);
   return node ? getNodeId(node) : 0;
 }
-function getImportLocation(fileMap, source) {
+const cache = {}
+function tryGetImportLocation(fileMap, source) {
+  if (source in cache) { return cache[source] }
   for (const [path, reg] of fileMap) {
     if (source.match(reg)) {
-      return source.replace(reg, path);
+      const r = source.replace(reg, path)
+      cache[source] = r
+      return r;
     }
   }
-  throw new Error(`cannot get import path for file: ${source} (Make sure to add it in your tsplus.config.json)`);
+  cache[source] = undefined
+  return undefined
+}
+function getImportLocation(fileMap, source) {
+  const found = tryGetImportLocation(fileMap, source)
+  if (!found) { throw new Error(`cannot get import path for file: ${source} (Make sure to add it in your tsplus.config.json)`); }
+  return found
 }
 function getTraceLocation(traceMap, source) {
   for (const [path, reg] of traceMap) {
diff --git a/node_modules/typescript/lib/tsserver.js b/node_modules/typescript/lib/tsserver.js
index 953136d..12448cb 100644
--- a/node_modules/typescript/lib/tsserver.js
+++ b/node_modules/typescript/lib/tsserver.js
@@ -49277,6 +49277,15 @@ ${lanes.join("\n")}
         return top;
       }
       function getSpecifierForModuleSymbol(symbol, context, overrideImportMode) {
+        let specifier = getSpecifierForModuleSymbol_(symbol, context, overrideImportMode)
+        // ts plus import workaround
+        if (specifier && specifier.indexOf("/node_modules/") > 0 && specifier.endsWith(".js")) {
+          const r = tryGetImportLocation(fileMap.map, specifier)
+          if (r) { specifier = r }
+        }
+        return specifier
+      }
+      function getSpecifierForModuleSymbol_(symbol, context, overrideImportMode) {
         var _a2;
         let file = getDeclarationOfKind(symbol, 308 /* SourceFile */);
         if (!file) {
@@ -84403,13 +84412,23 @@ ${lanes.join("\n")}
     node = getOriginalNode(node);
     return node ? getNodeId(node) : 0;
   }
-  function getImportLocation(fileMap, source) {
+  const cache = {}
+  function tryGetImportLocation(fileMap, source) {
+    if (source in cache) { return cache[source] }
     for (const [path, reg] of fileMap) {
       if (source.match(reg)) {
-        return source.replace(reg, path);
+        const r = source.replace(reg, path)
+        cache[source] = r
+        return r;
       }
     }
-    throw new Error(`cannot get import path for file: ${source} (Make sure to add it in your tsplus.config.json)`);
+    cache[source] = undefined
+    return undefined
+  }
+  function getImportLocation(fileMap, source) {
+    const found = tryGetImportLocation(fileMap, source)
+    if (!found) { throw new Error(`cannot get import path for file: ${source} (Make sure to add it in your tsplus.config.json)`); }
+    return found
   }
   function getTraceLocation(traceMap, source) {
     for (const [path, reg] of traceMap) {
